# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import siphon_service_pb2 as siphon__service__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in siphon_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SiphonServiceStub(object):
    """Service definition for managing a single variable
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAttribute = channel.unary_unary(
                '/siphon_service.SiphonService/GetAttribute',
                request_serializer=siphon__service__pb2.GetSiphonRequest.SerializeToString,
                response_deserializer=siphon__service__pb2.GetSiphonResponse.FromString,
                _registered_method=True)
        self.SetAttribute = channel.unary_unary(
                '/siphon_service.SiphonService/SetAttribute',
                request_serializer=siphon__service__pb2.SetSiphonRequest.SerializeToString,
                response_deserializer=siphon__service__pb2.SetSiphonResponse.FromString,
                _registered_method=True)
        self.InputKey = channel.unary_unary(
                '/siphon_service.SiphonService/InputKey',
                request_serializer=siphon__service__pb2.InputKeyRequest.SerializeToString,
                response_deserializer=siphon__service__pb2.InputKeyResponse.FromString,
                _registered_method=True)
        self.CaptureFrame = channel.unary_unary(
                '/siphon_service.SiphonService/CaptureFrame',
                request_serializer=siphon__service__pb2.CaptureFrameRequest.SerializeToString,
                response_deserializer=siphon__service__pb2.CaptureFrameResponse.FromString,
                _registered_method=True)


class SiphonServiceServicer(object):
    """Service definition for managing a single variable
    """

    def GetAttribute(self, request, context):
        """Get the current value of the variable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttribute(self, request, context):
        """Set the value of the variable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InputKey(self, request, context):
        """Input a key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CaptureFrame(self, request, context):
        """Capture a frame
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SiphonServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAttribute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttribute,
                    request_deserializer=siphon__service__pb2.GetSiphonRequest.FromString,
                    response_serializer=siphon__service__pb2.GetSiphonResponse.SerializeToString,
            ),
            'SetAttribute': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttribute,
                    request_deserializer=siphon__service__pb2.SetSiphonRequest.FromString,
                    response_serializer=siphon__service__pb2.SetSiphonResponse.SerializeToString,
            ),
            'InputKey': grpc.unary_unary_rpc_method_handler(
                    servicer.InputKey,
                    request_deserializer=siphon__service__pb2.InputKeyRequest.FromString,
                    response_serializer=siphon__service__pb2.InputKeyResponse.SerializeToString,
            ),
            'CaptureFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.CaptureFrame,
                    request_deserializer=siphon__service__pb2.CaptureFrameRequest.FromString,
                    response_serializer=siphon__service__pb2.CaptureFrameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'siphon_service.SiphonService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('siphon_service.SiphonService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SiphonService(object):
    """Service definition for managing a single variable
    """

    @staticmethod
    def GetAttribute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/siphon_service.SiphonService/GetAttribute',
            siphon__service__pb2.GetSiphonRequest.SerializeToString,
            siphon__service__pb2.GetSiphonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetAttribute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/siphon_service.SiphonService/SetAttribute',
            siphon__service__pb2.SetSiphonRequest.SerializeToString,
            siphon__service__pb2.SetSiphonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InputKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/siphon_service.SiphonService/InputKey',
            siphon__service__pb2.InputKeyRequest.SerializeToString,
            siphon__service__pb2.InputKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CaptureFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/siphon_service.SiphonService/CaptureFrame',
            siphon__service__pb2.CaptureFrameRequest.SerializeToString,
            siphon__service__pb2.CaptureFrameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
