{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EldenGym","text":"<p>Welcome to EldenGym - a Gymnasium environment for training reinforcement learning agents in Elden Ring!</p>"},{"location":"#overview","title":"Overview","text":"<p>EldenGym provides a complete RL environment interface for Elden Ring, allowing you to:</p> <ul> <li>Train agents on boss fights and game scenarios</li> <li>Access game state through memory reading</li> <li>Control the game through automated inputs</li> <li>Capture and process game frames in real-time</li> <li>Customize reward functions and observation spaces</li> </ul>"},{"location":"#features","title":"Features","text":"<p>\u2728 Full Gymnasium API - Standard RL environment interface \ud83c\udfae Game Control - Keyboard, mouse, and game state manipulation \ud83d\udcca Flexible Observations - RGB frames, game state, or both \ud83c\udfaf Custom Rewards - Define your own reward functions \u26a1 High Performance - gRPC-based communication with C++ backend \ud83d\udd27 Easy Configuration - TOML-based game configuration</p>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import gymnasium as gym\nimport eldengym\n\n# Create the environment\nenv = gym.make(\"EldenGym-v0\", scenario_name=\"margit\")\n\n# Standard RL loop\nobs, info = env.reset()\nfor _ in range(1000):\n    action = env.action_space.sample()  # Your agent here\n    obs, reward, terminated, truncated, info = env.step(action)\n    if terminated or truncated:\n        obs, info = env.reset()\n\nenv.close()\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Your RL Agent                \u2502\n\u2502  (stable-baselines3, custom, etc)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 Gymnasium API\n               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         EldenGym (Python)           \u2502\n\u2502  - Environment wrapper              \u2502\n\u2502  - Reward functions                 \u2502\n\u2502  - Observation processing           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 gRPC\n               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Siphon Server (C++)            \u2502\n\u2502  - Memory reading/writing           \u2502\n\u2502  - Input injection                  \u2502\n\u2502  - Screen capture                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u25bc\n         Elden Ring Game\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Get started with EldenGym</li> <li>Quick Start Tutorial - Your first RL agent</li> <li>API Reference - Detailed API documentation</li> <li>Examples - See EldenGym in action</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you use EldenGym in your research, please cite:</p> <pre><code>@software{eldengym2025,\n  title = {EldenGym: A Gymnasium Environment for Elden Ring},\n  author = {Your Name},\n  year = {2025},\n  url = {https://github.com/dhmnr/eldengym}\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api/elden-client/","title":"EldenClient API","text":"<p>The <code>EldenClient</code> class provides game-specific functionality for Elden Ring.</p>"},{"location":"api/elden-client/#eldenclient","title":"EldenClient","text":""},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient","title":"EldenClient","text":"<p>               Bases: <code>SiphonClient</code></p> <p>Client for the Elden Ring game.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>class EldenClient(SiphonClient):\n    \"\"\"\n    Client for the Elden Ring game.\n    \"\"\"\n\n    def __init__(self, host=\"localhost:50051\", **kwargs):\n        super().__init__(host, **kwargs)\n        self.scenarios = {\n            \"margit\": {\n                \"boss_name\": \"Margit\",\n                \"fog_wall_location\": (\n                    19.958229064941406,\n                    -11.990748405456543,\n                    -7.051832675933838,\n                ),\n            }\n        }\n\n    ## =========== Initialization methods ===========\n    # def load_config_from_file(self, config_filepath):\n    #     \"\"\"\n    #     Load process configuration from a TOML file and send to server.\n\n    #     This is a convenience method that parses the config file and calls\n    #     set_process_config with the extracted data.\n\n    #     Args:\n    #         config_filepath: str or Path, path to TOML config file\n\n    #     Returns:\n    #         SetProcessConfigResponse from server\n\n    #     Raises:\n    #         FileNotFoundError: If config file doesn't exist\n    #         ValueError: If config file is malformed\n\n    #     Example:\n    #         &gt;&gt;&gt; client = EldenClient()\n    #         &gt;&gt;&gt; response = client.load_config_from_file(\"config.toml\")\n    #         &gt;&gt;&gt; if response.success:\n    #         ...     print(\"Config loaded successfully!\")\n    #     \"\"\"\n    #     process_name, process_window_name, attributes = parse_config_file(config_filepath)\n    #     return self.set_process_config(process_name, process_window_name, attributes)\n\n    def _resolve_config_path(self, config_filepath):\n        \"\"\"\n        Resolve config file path relative to package root.\n\n        Args:\n            config_filepath: str or Path, can be:\n                - Absolute path: used as-is\n                - Relative path: resolved relative to package root (eldengym/)\n                - Filename only: looked up in eldengym/files/configs/\n\n        Returns:\n            Path: Resolved absolute path to config file\n        \"\"\"\n        config_path = Path(config_filepath)\n\n        # If absolute path, use it directly\n        if config_path.is_absolute():\n            return config_path\n\n        # Get package root (eldengym/)\n        package_root = Path(__file__).parent.parent\n\n        # If it's just a filename (no directory parts), look in configs directory\n        if len(config_path.parts) == 1:\n            config_path = package_root / \"files\" / \"configs\" / config_path\n        else:\n            # Relative path - resolve from package root\n            config_path = package_root / config_path\n\n        return config_path.resolve()\n\n    def load_config_from_file(self, config_filepath, wait_time=2):\n        \"\"\"\n        Complete initialization sequence: load config, initialize memory, input, and capture.\n\n        This is a convenience method that performs all initialization steps at once,\n        mirroring the 'init' command from the C++ client.\n\n        Args:\n            config_filepath: str or Path, path to TOML config file. Can be:\n                - Absolute path: /full/path/to/config.toml\n                - Relative to package: files/configs/ER_1_16_1.toml\n                - Filename only: ER_1_16_1.toml (searches in eldengym/files/configs/)\n            wait_time: int, seconds to wait after loading config before initializing subsystems\n\n        Returns:\n            dict with keys 'config', 'memory', 'input', 'capture' containing the responses\n\n        Raises:\n            FileNotFoundError: If config file doesn't exist\n            ValueError: If config file is malformed\n            RuntimeError: If any initialization step fails\n\n        Example:\n            &gt;&gt;&gt; client = EldenClient()\n            &gt;&gt;&gt; # All these work from any directory:\n            &gt;&gt;&gt; results = client.load_config_from_file(\"ER_1_16_1.toml\")\n            &gt;&gt;&gt; results = client.load_config_from_file(\"files/configs/ER_1_16_1.toml\")\n            &gt;&gt;&gt; results = client.load_config_from_file(\"/absolute/path/to/config.toml\")\n        \"\"\"\n        import time\n\n        results = {}\n\n        # Resolve config path\n        resolved_path = self._resolve_config_path(config_filepath)\n\n        # Parse config file\n        print(f\"Loading config from: {resolved_path}\")\n        process_name, process_window_name, attributes = parse_config_file(resolved_path)\n\n        print(\n            f\"Config loaded - Process: {process_name}, Window: {process_window_name}, \"\n            f\"Attributes: {len(attributes)}\"\n        )\n\n        # Send config to server\n        print(\"Sending configuration to server...\")\n        config_response = self.set_process_config(\n            process_name, process_window_name, attributes\n        )\n        results[\"config\"] = config_response\n\n        if not config_response.success:\n            raise RuntimeError(\n                f\"Failed to set process config: {config_response.message}\"\n            )\n\n        print(f\"Server response: {config_response.message}\")\n\n        # Wait for process to be ready\n        if wait_time &gt; 0:\n            print(f\"Waiting {wait_time} seconds for process to be ready...\")\n            time.sleep(wait_time)\n\n        # Initialize memory\n        print(\"Initializing memory subsystem...\")\n        memory_response = self.initialize_memory()\n        results[\"memory\"] = memory_response\n\n        if not memory_response.success:\n            raise RuntimeError(\n                f\"Failed to initialize memory: {memory_response.message}\"\n            )\n\n        print(f\"Server response: {memory_response.message}\")\n        if hasattr(memory_response, \"process_id\") and memory_response.process_id &gt; 0:\n            print(f\"Process ID: {memory_response.process_id}\")\n\n        # Initialize input\n        print(\"Initializing input subsystem...\")\n        input_response = self.initialize_input()\n        results[\"input\"] = input_response\n\n        if not input_response.success:\n            raise RuntimeError(f\"Failed to initialize input: {input_response.message}\")\n\n        print(f\"Server response: {input_response.message}\")\n\n        # Initialize capture\n        print(\"Initializing capture subsystem...\")\n        capture_response = self.initialize_capture()\n        results[\"capture\"] = capture_response\n\n        if not capture_response.success:\n            raise RuntimeError(\n                f\"Failed to initialize capture: {capture_response.message}\"\n            )\n\n        print(f\"Server response: {capture_response.message}\")\n        if hasattr(capture_response, \"window_width\") and hasattr(\n            capture_response, \"window_height\"\n        ):\n            if capture_response.window_width &gt; 0 and capture_response.window_height &gt; 0:\n                print(\n                    f\"Window size: {capture_response.window_width}x{capture_response.window_height}\"\n                )\n\n        print(\"\\n=== Initialization Complete! ===\")\n        print(\"All subsystems initialized successfully.\")\n\n        return results\n\n    def launch_game(self):\n        \"\"\"\n        Launch the game.\n        \"\"\"\n        launch_response = self.execute_command(\n            \"start_protected_game.exe\",\n            args=None,\n            working_directory=\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\ELDEN RING\\Game\",\n        )\n        if not launch_response.success:\n            raise RuntimeError(f\"Failed to launch game: {launch_response.message}\")\n\n        print(f\"Server response: {launch_response.message}\")\n        if hasattr(launch_response, \"process_id\") and launch_response.process_id &gt; 0:\n            print(f\"Process ID: {launch_response.process_id}\")\n\n        return launch_response\n\n    def bypass_menu(self):\n        \"\"\"\n        Bypass the menu.\n        \"\"\"\n        self.send_key([\"ENTER\"], 200, 0)\n        sleep(1)\n        self.send_key([\"ENTER\"], 200, 0)\n        sleep(1)\n        self.send_key([\"ENTER\"], 200, 0)\n\n    ## =========== Player methods ===========\n    @property\n    def player_hp(self):\n        \"\"\"\n        Get the health of the player.\n        \"\"\"\n        return self.get_attribute(\"HeroHp\")\n\n    @property\n    def player_max_hp(self):\n        \"\"\"\n        Get the maximum health of the player.\n        \"\"\"\n        return self.get_attribute(\"HeroMaxHp\")\n\n    def set_player_hp(self, hp):\n        \"\"\"\n        Set the health of the player.\n        \"\"\"\n        self.set_attribute(\"HeroHp\", hp)\n\n    @property\n    def local_player_coords(self):\n        \"\"\"\n        Get the location of the player.\n        \"\"\"\n        local_x = self.get_attribute(\"HeroLocalPosX\")\n        local_y = self.get_attribute(\"HeroLocalPosY\")\n        local_z = self.get_attribute(\"HeroLocalPosZ\")\n        return local_x, local_y, local_z\n\n    @property\n    def global_player_coords(self):\n        \"\"\"\n        Get the location of the player.\n        \"\"\"\n        global_x = self.get_attribute(\"HeroGlobalPosX\")\n        global_y = self.get_attribute(\"HeroGlobalPosY\")\n        global_z = self.get_attribute(\"HeroGlobalPosZ\")\n        return global_x, global_y, global_z\n\n    @property\n    def player_animation_id(self):\n        \"\"\"\n        Get the animation id of the player.\n        \"\"\"\n        return self.get_attribute(\"HeroAnimId\")\n\n    ## =========== Target methods ===========\n    @property\n    def target_hp(self):\n        \"\"\"\n        Get the health of the target.\n        \"\"\"\n        return self.get_attribute(\"NpcHp\")\n\n    @property\n    def target_max_hp(self):\n        \"\"\"\n        Get the maximum health of the target.\n        \"\"\"\n        return self.get_attribute(\"NpcMaxHp\")\n\n    def set_target_hp(self, hp):\n        \"\"\"\n        Set the health of the target.\n        \"\"\"\n        self.set_attribute(\"NpcHp\", hp)\n\n    @property\n    def local_target_coords(self):\n        \"\"\"\n        Get the location of the target.\n        \"\"\"\n        local_x = self.get_attribute(\"NpcLocalPosX\")\n        local_y = self.get_attribute(\"NpcLocalPosY\")\n        local_z = self.get_attribute(\"NpcLocalPosZ\")\n        return local_x, local_y, local_z\n\n    @property\n    def global_target_coords(self):\n        \"\"\"\n        Get the location of the target.\n        \"\"\"\n        global_x = self.get_attribute(\"NpcGlobalPosX\")\n        global_y = self.get_attribute(\"NpcGlobalPosY\")\n        global_z = self.get_attribute(\"NpcGlobalPosZ\")\n        return global_x, global_y, global_z\n\n    @property\n    def target_animation_id(self):\n        \"\"\"\n        Get the animation id of the target.\n        \"\"\"\n        return self.get_attribute(\"NpcAnimId\")\n\n    ## =========== Helper methods ===========\n    @property\n    def target_player_distance(self):\n        \"\"\"\n        Get the distance between the player and the target.\n        \"\"\"\n        player_x, player_y, player_z = self.local_player_coords\n        target_x, target_y, target_z = self.global_target_coords\n        return np.linalg.norm(\n            [player_x - target_x, player_y - target_y, player_z - target_z]\n        )\n\n    def teleport(self, x, y, z):\n        \"\"\"\n        Teleport the player to the given coordinates.\n        \"\"\"\n        # FIXME: Close range teleport, need to check MapId for long range teleport.\n        local_x, local_y, local_z = self.local_player_coords\n        global_x, global_y, global_z = self.global_player_coords\n        self.set_attribute(\"HeroLocalPosX\", local_x + (x - global_x))\n        self.set_attribute(\"HeroLocalPosY\", local_y + (y - global_y))\n        self.set_attribute(\"HeroLocalPosZ\", local_z + (z - global_z))\n\n    def set_game_speed(self, speed):\n        \"\"\"\n        Set the game speed.\n        \"\"\"\n        self.set_attribute(\"gameSpeedFlag\", True)\n        self.set_attribute(\"gameSpeedVal\", speed)\n\n    def reset_game(self):\n        \"\"\"\n        Reset the game by setting the player's hp to 0.\n        \"\"\"\n        self.set_player_hp(0)\n        sleep(\n            20\n        )  # FIXME: This is a hack to wait for the game to reset, doesn't work well.\n\n    def start_scenario(self, scenario_name=\"Margit\"):\n        \"\"\"\n        Start the scenario with the given scenario name.\n        \"\"\"\n        # FIXME: This is a hack to start boss fight. Need to check fogwall state. or use another method.\n        x, y, z = self.scenarios[scenario_name][\"fog_wall_location\"]\n        self.teleport(x, y, z)\n        self.move_mouse(1000, 0, 1)\n        sleep(2)\n        self.send_key([\"W\", \"E\"], 200, 200)\n        sleep(2)\n        self.send_key([\"B\"], 200)\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.global_player_coords","title":"global_player_coords  <code>property</code>","text":"<pre><code>global_player_coords\n</code></pre> <p>Get the location of the player.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.global_target_coords","title":"global_target_coords  <code>property</code>","text":"<pre><code>global_target_coords\n</code></pre> <p>Get the location of the target.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.local_player_coords","title":"local_player_coords  <code>property</code>","text":"<pre><code>local_player_coords\n</code></pre> <p>Get the location of the player.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.local_target_coords","title":"local_target_coords  <code>property</code>","text":"<pre><code>local_target_coords\n</code></pre> <p>Get the location of the target.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.player_animation_id","title":"player_animation_id  <code>property</code>","text":"<pre><code>player_animation_id\n</code></pre> <p>Get the animation id of the player.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.player_hp","title":"player_hp  <code>property</code>","text":"<pre><code>player_hp\n</code></pre> <p>Get the health of the player.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.player_max_hp","title":"player_max_hp  <code>property</code>","text":"<pre><code>player_max_hp\n</code></pre> <p>Get the maximum health of the player.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.target_animation_id","title":"target_animation_id  <code>property</code>","text":"<pre><code>target_animation_id\n</code></pre> <p>Get the animation id of the target.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.target_hp","title":"target_hp  <code>property</code>","text":"<pre><code>target_hp\n</code></pre> <p>Get the health of the target.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.target_max_hp","title":"target_max_hp  <code>property</code>","text":"<pre><code>target_max_hp\n</code></pre> <p>Get the maximum health of the target.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.target_player_distance","title":"target_player_distance  <code>property</code>","text":"<pre><code>target_player_distance\n</code></pre> <p>Get the distance between the player and the target.</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.bypass_menu","title":"bypass_menu","text":"<pre><code>bypass_menu()\n</code></pre> <p>Bypass the menu.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def bypass_menu(self):\n    \"\"\"\n    Bypass the menu.\n    \"\"\"\n    self.send_key([\"ENTER\"], 200, 0)\n    sleep(1)\n    self.send_key([\"ENTER\"], 200, 0)\n    sleep(1)\n    self.send_key([\"ENTER\"], 200, 0)\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.launch_game","title":"launch_game","text":"<pre><code>launch_game()\n</code></pre> <p>Launch the game.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def launch_game(self):\n    \"\"\"\n    Launch the game.\n    \"\"\"\n    launch_response = self.execute_command(\n        \"start_protected_game.exe\",\n        args=None,\n        working_directory=\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\ELDEN RING\\Game\",\n    )\n    if not launch_response.success:\n        raise RuntimeError(f\"Failed to launch game: {launch_response.message}\")\n\n    print(f\"Server response: {launch_response.message}\")\n    if hasattr(launch_response, \"process_id\") and launch_response.process_id &gt; 0:\n        print(f\"Process ID: {launch_response.process_id}\")\n\n    return launch_response\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.load_config_from_file","title":"load_config_from_file","text":"<pre><code>load_config_from_file(config_filepath, wait_time=2)\n</code></pre> <p>Complete initialization sequence: load config, initialize memory, input, and capture.</p> <p>This is a convenience method that performs all initialization steps at once, mirroring the 'init' command from the C++ client.</p> <p>Parameters:</p> Name Type Description Default <code>config_filepath</code> <p>str or Path, path to TOML config file. Can be: - Absolute path: /full/path/to/config.toml - Relative to package: files/configs/ER_1_16_1.toml - Filename only: ER_1_16_1.toml (searches in eldengym/files/configs/)</p> required <code>wait_time</code> <p>int, seconds to wait after loading config before initializing subsystems</p> <code>2</code> <p>Returns:</p> Type Description <p>dict with keys 'config', 'memory', 'input', 'capture' containing the responses</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If config file doesn't exist</p> <code>ValueError</code> <p>If config file is malformed</p> <code>RuntimeError</code> <p>If any initialization step fails</p> Example <p>client = EldenClient()</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def load_config_from_file(self, config_filepath, wait_time=2):\n    \"\"\"\n    Complete initialization sequence: load config, initialize memory, input, and capture.\n\n    This is a convenience method that performs all initialization steps at once,\n    mirroring the 'init' command from the C++ client.\n\n    Args:\n        config_filepath: str or Path, path to TOML config file. Can be:\n            - Absolute path: /full/path/to/config.toml\n            - Relative to package: files/configs/ER_1_16_1.toml\n            - Filename only: ER_1_16_1.toml (searches in eldengym/files/configs/)\n        wait_time: int, seconds to wait after loading config before initializing subsystems\n\n    Returns:\n        dict with keys 'config', 'memory', 'input', 'capture' containing the responses\n\n    Raises:\n        FileNotFoundError: If config file doesn't exist\n        ValueError: If config file is malformed\n        RuntimeError: If any initialization step fails\n\n    Example:\n        &gt;&gt;&gt; client = EldenClient()\n        &gt;&gt;&gt; # All these work from any directory:\n        &gt;&gt;&gt; results = client.load_config_from_file(\"ER_1_16_1.toml\")\n        &gt;&gt;&gt; results = client.load_config_from_file(\"files/configs/ER_1_16_1.toml\")\n        &gt;&gt;&gt; results = client.load_config_from_file(\"/absolute/path/to/config.toml\")\n    \"\"\"\n    import time\n\n    results = {}\n\n    # Resolve config path\n    resolved_path = self._resolve_config_path(config_filepath)\n\n    # Parse config file\n    print(f\"Loading config from: {resolved_path}\")\n    process_name, process_window_name, attributes = parse_config_file(resolved_path)\n\n    print(\n        f\"Config loaded - Process: {process_name}, Window: {process_window_name}, \"\n        f\"Attributes: {len(attributes)}\"\n    )\n\n    # Send config to server\n    print(\"Sending configuration to server...\")\n    config_response = self.set_process_config(\n        process_name, process_window_name, attributes\n    )\n    results[\"config\"] = config_response\n\n    if not config_response.success:\n        raise RuntimeError(\n            f\"Failed to set process config: {config_response.message}\"\n        )\n\n    print(f\"Server response: {config_response.message}\")\n\n    # Wait for process to be ready\n    if wait_time &gt; 0:\n        print(f\"Waiting {wait_time} seconds for process to be ready...\")\n        time.sleep(wait_time)\n\n    # Initialize memory\n    print(\"Initializing memory subsystem...\")\n    memory_response = self.initialize_memory()\n    results[\"memory\"] = memory_response\n\n    if not memory_response.success:\n        raise RuntimeError(\n            f\"Failed to initialize memory: {memory_response.message}\"\n        )\n\n    print(f\"Server response: {memory_response.message}\")\n    if hasattr(memory_response, \"process_id\") and memory_response.process_id &gt; 0:\n        print(f\"Process ID: {memory_response.process_id}\")\n\n    # Initialize input\n    print(\"Initializing input subsystem...\")\n    input_response = self.initialize_input()\n    results[\"input\"] = input_response\n\n    if not input_response.success:\n        raise RuntimeError(f\"Failed to initialize input: {input_response.message}\")\n\n    print(f\"Server response: {input_response.message}\")\n\n    # Initialize capture\n    print(\"Initializing capture subsystem...\")\n    capture_response = self.initialize_capture()\n    results[\"capture\"] = capture_response\n\n    if not capture_response.success:\n        raise RuntimeError(\n            f\"Failed to initialize capture: {capture_response.message}\"\n        )\n\n    print(f\"Server response: {capture_response.message}\")\n    if hasattr(capture_response, \"window_width\") and hasattr(\n        capture_response, \"window_height\"\n    ):\n        if capture_response.window_width &gt; 0 and capture_response.window_height &gt; 0:\n            print(\n                f\"Window size: {capture_response.window_width}x{capture_response.window_height}\"\n            )\n\n    print(\"\\n=== Initialization Complete! ===\")\n    print(\"All subsystems initialized successfully.\")\n\n    return results\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.load_config_from_file--all-these-work-from-any-directory","title":"All these work from any directory:","text":"<p>results = client.load_config_from_file(\"ER_1_16_1.toml\") results = client.load_config_from_file(\"files/configs/ER_1_16_1.toml\") results = client.load_config_from_file(\"/absolute/path/to/config.toml\")</p>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.reset_game","title":"reset_game","text":"<pre><code>reset_game()\n</code></pre> <p>Reset the game by setting the player's hp to 0.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def reset_game(self):\n    \"\"\"\n    Reset the game by setting the player's hp to 0.\n    \"\"\"\n    self.set_player_hp(0)\n    sleep(\n        20\n    )  # FIXME: This is a hack to wait for the game to reset, doesn't work well.\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.set_game_speed","title":"set_game_speed","text":"<pre><code>set_game_speed(speed)\n</code></pre> <p>Set the game speed.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def set_game_speed(self, speed):\n    \"\"\"\n    Set the game speed.\n    \"\"\"\n    self.set_attribute(\"gameSpeedFlag\", True)\n    self.set_attribute(\"gameSpeedVal\", speed)\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.set_player_hp","title":"set_player_hp","text":"<pre><code>set_player_hp(hp)\n</code></pre> <p>Set the health of the player.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def set_player_hp(self, hp):\n    \"\"\"\n    Set the health of the player.\n    \"\"\"\n    self.set_attribute(\"HeroHp\", hp)\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.set_target_hp","title":"set_target_hp","text":"<pre><code>set_target_hp(hp)\n</code></pre> <p>Set the health of the target.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def set_target_hp(self, hp):\n    \"\"\"\n    Set the health of the target.\n    \"\"\"\n    self.set_attribute(\"NpcHp\", hp)\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.start_scenario","title":"start_scenario","text":"<pre><code>start_scenario(scenario_name='Margit')\n</code></pre> <p>Start the scenario with the given scenario name.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def start_scenario(self, scenario_name=\"Margit\"):\n    \"\"\"\n    Start the scenario with the given scenario name.\n    \"\"\"\n    # FIXME: This is a hack to start boss fight. Need to check fogwall state. or use another method.\n    x, y, z = self.scenarios[scenario_name][\"fog_wall_location\"]\n    self.teleport(x, y, z)\n    self.move_mouse(1000, 0, 1)\n    sleep(2)\n    self.send_key([\"W\", \"E\"], 200, 200)\n    sleep(2)\n    self.send_key([\"B\"], 200)\n</code></pre>"},{"location":"api/elden-client/#eldengym.client.elden_client.EldenClient.teleport","title":"teleport","text":"<pre><code>teleport(x, y, z)\n</code></pre> <p>Teleport the player to the given coordinates.</p> Source code in <code>eldengym/client/elden_client.py</code> <pre><code>def teleport(self, x, y, z):\n    \"\"\"\n    Teleport the player to the given coordinates.\n    \"\"\"\n    # FIXME: Close range teleport, need to check MapId for long range teleport.\n    local_x, local_y, local_z = self.local_player_coords\n    global_x, global_y, global_z = self.global_player_coords\n    self.set_attribute(\"HeroLocalPosX\", local_x + (x - global_x))\n    self.set_attribute(\"HeroLocalPosY\", local_y + (y - global_y))\n    self.set_attribute(\"HeroLocalPosZ\", local_z + (z - global_z))\n</code></pre>"},{"location":"api/elden-client/#initialization-methods","title":"Initialization Methods","text":""},{"location":"api/elden-client/#load_config_from_fileconfig_filepath-wait_time2","title":"<code>load_config_from_file(config_filepath, wait_time=2)</code>","text":"<p>Complete initialization: load config, initialize memory, input, and capture subsystems.</p> <p>Args: - <code>config_filepath</code> (str | Path): Path to TOML config file   - Filename only: <code>\"ER_1_16_1.toml\"</code> (searches in <code>eldengym/files/configs/</code>)   - Relative path: <code>\"files/configs/ER_1_16_1.toml\"</code> (from package root)   - Absolute path: <code>\"/full/path/to/config.toml\"</code> - <code>wait_time</code> (int): Seconds to wait after loading config (default: 2)</p> <p>Returns: - <code>dict</code>: Results with keys <code>'config'</code>, <code>'memory'</code>, <code>'input'</code>, <code>'capture'</code></p> <p>Example: <pre><code>from eldengym.client.elden_client import EldenClient\n\nclient = EldenClient(host=\"localhost:50051\")\nresults = client.load_config_from_file(\"ER_1_16_1.toml\")\n\nprint(f\"Initialized: {results['memory'].success}\")\n</code></pre></p>"},{"location":"api/elden-client/#launch_game","title":"<code>launch_game()</code>","text":"<p>Launch Elden Ring game executable.</p> <p>Returns: - <code>ExecuteCommandResponse</code>: Command execution result</p>"},{"location":"api/elden-client/#bypass_menu","title":"<code>bypass_menu()</code>","text":"<p>Automatically bypass the main menu to load into the game.</p>"},{"location":"api/elden-client/#player-methods","title":"Player Methods","text":""},{"location":"api/elden-client/#properties","title":"Properties","text":""},{"location":"api/elden-client/#player_hp","title":"<code>player_hp</code>","text":"<p>Get player's current HP.</p> <pre><code>hp = client.player_hp\nprint(f\"HP: {hp}\")\n</code></pre>"},{"location":"api/elden-client/#player_max_hp","title":"<code>player_max_hp</code>","text":"<p>Get player's maximum HP.</p>"},{"location":"api/elden-client/#local_player_coords","title":"<code>local_player_coords</code>","text":"<p>Get player's local coordinates (x, y, z).</p> <pre><code>x, y, z = client.local_player_coords\n</code></pre>"},{"location":"api/elden-client/#global_player_coords","title":"<code>global_player_coords</code>","text":"<p>Get player's global coordinates (x, y, z).</p>"},{"location":"api/elden-client/#player_animation_id","title":"<code>player_animation_id</code>","text":"<p>Get current player animation ID.</p>"},{"location":"api/elden-client/#methods","title":"Methods","text":""},{"location":"api/elden-client/#set_player_hphp","title":"<code>set_player_hp(hp)</code>","text":"<p>Set player's HP.</p> <pre><code>client.set_player_hp(1000)  # Set HP to 1000\n</code></pre>"},{"location":"api/elden-client/#teleportx-y-z","title":"<code>teleport(x, y, z)</code>","text":"<p>Teleport player to coordinates.</p> <pre><code>client.teleport(100.0, 200.0, 50.0)\n</code></pre>"},{"location":"api/elden-client/#targetboss-methods","title":"Target/Boss Methods","text":""},{"location":"api/elden-client/#properties_1","title":"Properties","text":""},{"location":"api/elden-client/#target_hp","title":"<code>target_hp</code>","text":"<p>Get target's current HP.</p>"},{"location":"api/elden-client/#target_max_hp","title":"<code>target_max_hp</code>","text":"<p>Get target's maximum HP.</p>"},{"location":"api/elden-client/#local_target_coords","title":"<code>local_target_coords</code>","text":"<p>Get target's local coordinates (x, y, z).</p>"},{"location":"api/elden-client/#global_target_coords","title":"<code>global_target_coords</code>","text":"<p>Get target's global coordinates (x, y, z).</p>"},{"location":"api/elden-client/#target_animation_id","title":"<code>target_animation_id</code>","text":"<p>Get current target animation ID.</p>"},{"location":"api/elden-client/#methods_1","title":"Methods","text":""},{"location":"api/elden-client/#set_target_hphp","title":"<code>set_target_hp(hp)</code>","text":"<p>Set target's HP.</p> <pre><code>client.set_target_hp(500)  # Set boss HP to 500\n</code></pre>"},{"location":"api/elden-client/#helper-methods","title":"Helper Methods","text":""},{"location":"api/elden-client/#target_player_distance","title":"<code>target_player_distance</code>","text":"<p>Get distance between player and target.</p> <pre><code>distance = client.target_player_distance\nprint(f\"Distance to boss: {distance:.2f}\")\n</code></pre>"},{"location":"api/elden-client/#set_game_speedspeed","title":"<code>set_game_speed(speed)</code>","text":"<p>Set game speed multiplier.</p> <pre><code>client.set_game_speed(2.0)  # 2x speed\nclient.set_game_speed(0.5)  # Half speed\n</code></pre>"},{"location":"api/elden-client/#reset_game","title":"<code>reset_game()</code>","text":"<p>Reset the game (kills player, triggers death/respawn).</p> <pre><code>client.reset_game()\n</code></pre>"},{"location":"api/elden-client/#start_scenarioscenario_name","title":"<code>start_scenario(scenario_name)</code>","text":"<p>Start a boss fight scenario.</p> <p>Args: - <code>scenario_name</code> (str): Name of scenario (e.g., \"margit\")</p> <pre><code>client.start_scenario(\"margit\")\n</code></pre>"},{"location":"api/elden-client/#low-level-methods","title":"Low-Level Methods","text":"<p>These methods are inherited from <code>SiphonClient</code> and provide direct game control:</p> <ul> <li><code>send_key(keys, hold_time, delay_time)</code> - Send keyboard input</li> <li><code>move_mouse(delta_x, delta_y, steps)</code> - Move mouse</li> <li><code>toggle_key(key, toggle)</code> - Press/release key</li> <li><code>get_attribute(name)</code> - Read memory value</li> <li><code>set_attribute(name, value)</code> - Write memory value</li> <li><code>get_frame()</code> - Capture game frame</li> <li><code>execute_command(...)</code> - Execute system command</li> </ul> <p>See SiphonClient API for details.</p>"},{"location":"api/elden-client/#example-complete-workflow","title":"Example: Complete Workflow","text":"<pre><code>from eldengym.client.elden_client import EldenClient\n\n# Create client\nclient = EldenClient(host=\"localhost:50051\")\n\n# Initialize everything\nresults = client.load_config_from_file(\"ER_1_16_1.toml\", wait_time=2)\n\n# Get player info\nprint(f\"Player HP: {client.player_hp}/{client.player_max_hp}\")\nprint(f\"Boss HP: {client.target_hp}/{client.target_max_hp}\")\nprint(f\"Distance: {client.target_player_distance:.2f}\")\n\n# Control the game\nclient.send_key([\"W\"], 500)  # Move forward for 500ms\nclient.send_key([\"SPACE\"], 100)  # Jump\n\n# Capture frame\nframe = client.get_frame()\nprint(f\"Frame shape: {frame.shape}\")\n\n# Clean up\nclient.close()\n</code></pre>"},{"location":"api/env/","title":"Environment API","text":"<p>The main <code>EldenGymEnv</code> class implements the Gymnasium environment interface.</p>"},{"location":"api/env/#eldengymenv","title":"EldenGymEnv","text":""},{"location":"api/env/#eldengym.env.EldenGymEnv","title":"EldenGymEnv","text":"<p>               Bases: <code>Env</code></p> <p>Elden Ring Gymnasium environment - OpenAI Five style approach.</p> <p>Simple design philosophy: - Fixed timestep observations (like Dota/Atari) - Agent gets current game state every step - Let RL figure out action timing from animation_id</p> <p>Parameters:</p> Name Type Description Default <code>scenario_name</code> <code>str</code> <p>Boss scenario. Default: 'margit'</p> <code>'margit'</code> <code>host</code> <code>str</code> <p>Siphon client host. Default: 'localhost:50051'</p> <code>'localhost:50051'</code> <code>action_mode</code> <code>str</code> <p>Action space type. - 'discrete': Single action per step (14 actions) - 'multi_binary': Multiple keys per step (11 keys)</p> <code>'discrete'</code> <code>reward_function</code> <code>RewardFunction</code> <p>Custom reward function.</p> <code>None</code> <code>frame_skip</code> <code>int</code> <p>Frames to skip between observations. Higher = faster but less responsive. Default: 4</p> <code>4</code> <code>game_speed</code> <code>float</code> <p>Game speed (0.1-1.0). Lower = easier for agent. Default: 1.0</p> <code>1.0</code> <code>freeze_game</code> <code>bool</code> <p>Whether to freeze the game. Default: False</p> <code>False</code> <code>game_fps</code> <code>int</code> <p>Game FPS. Default: 60</p> <code>60</code> <code>max_step</code> <code>int</code> <p>Maximum number of steps. Default: None (infinite horizon)</p> <code>None</code> Action Spaces <p>discrete: Gym.spaces.Discrete(14)     - Predefined combos (attack, dodge_forward, etc.) multi_binary: Gym.spaces.MultiBinary(11)     - Individual keys (W, A, S, D, SPACE, SHIFT, etc.)     - Agent can press multiple keys simultaneously     - More flexible, closer to human input</p> Source code in <code>eldengym/env.py</code> <pre><code>class EldenGymEnv(gym.Env):\n    \"\"\"\n    Elden Ring Gymnasium environment - OpenAI Five style approach.\n\n    Simple design philosophy:\n    - Fixed timestep observations (like Dota/Atari)\n    - Agent gets current game state every step\n    - Let RL figure out action timing from animation_id\n\n    Args:\n        scenario_name (str): Boss scenario. Default: 'margit'\n        host (str): Siphon client host. Default: 'localhost:50051'\n        action_mode (str): Action space type.\n            - 'discrete': Single action per step (14 actions)\n            - 'multi_binary': Multiple keys per step (11 keys)\n        reward_function (RewardFunction): Custom reward function.\n        frame_skip (int): Frames to skip between observations.\n            Higher = faster but less responsive. Default: 4\n        game_speed (float): Game speed (0.1-1.0).\n            Lower = easier for agent. Default: 1.0\n        freeze_game (bool): Whether to freeze the game. Default: False\n        game_fps (int): Game FPS. Default: 60\n        max_step (int): Maximum number of steps. Default: None (infinite horizon)\n\n    Action Spaces:\n        discrete: Gym.spaces.Discrete(14)\n            - Predefined combos (attack, dodge_forward, etc.)\n        multi_binary: Gym.spaces.MultiBinary(11)\n            - Individual keys (W, A, S, D, SPACE, SHIFT, etc.)\n            - Agent can press multiple keys simultaneously\n            - More flexible, closer to human input\n    \"\"\"\n\n    def __init__(\n        self,\n        scenario_name=\"margit\",\n        host=\"localhost:50051\",\n        action_mode=\"discrete\",\n        reward_function=None,\n        frame_skip=4,  # Number of frames to skip (like Atari)\n        game_speed=1.0,  # Game speed multiplier\n        freeze_game=False,\n        game_fps=60,\n        max_step=None,\n        config_filepath=\"ER_1_16_1.toml\",  # Auto-resolves to eldengym/files/configs/\n    ):\n        super().__init__()\n\n        self.scenario_name = scenario_name\n        self.client = EldenClient(host)\n        self.action_mode = action_mode\n        self.frame_skip = frame_skip\n        self.game_speed = game_speed\n        self.freeze_game = freeze_game\n        self.game_fps = game_fps\n        self.max_step = max_step\n        self.config_filepath = config_filepath\n        self.step_count = 0\n        # Reward function\n        self.reward_function = reward_function or ScoreDeltaReward(\n            score_key=\"player_hp\"\n        )\n        if not isinstance(self.reward_function, RewardFunction):\n            raise TypeError(\"reward_fn must inherit from RewardFunction\")\n\n        # Actions\n        if action_mode == \"discrete\":\n            self.action_map = self._discrete_action_map()\n            self.action_space = gym.spaces.Discrete(len(self.action_map))\n            self.action_keybindings = self._discrete_action_keybindings()\n        elif action_mode == \"multi_binary\":\n            self.action_map = self._multi_binary_action_map()\n            self.action_space = gym.spaces.MultiBinary(len(self.action_map))\n            self.action_keybindings = None  # Not used in multi-binary\n        else:\n            raise ValueError(f\"Invalid action mode: {action_mode}\")\n\n        # Simple state tracking\n        self._prev_info = None\n        self._last_animation_id = None\n\n        # self._download_savefile() #TODO: Implement this\n        self.client.launch_game()\n        sleep(20)  # Wait for game to launch\n        self.client.load_config_from_file(self.config_filepath, wait_time=2)\n        sleep(2)  # Wait for config to load\n        self.client.bypass_menu()\n        sleep(10)  # Wait for game to load\n        self.first_load = True\n\n    def _multi_binary_action_map(self):\n        \"\"\"\n        Multi-binary action mapping - OpenAI Five style.\n\n        Each index can be 0 or 1 (pressed or not).\n        Agent can press multiple keys simultaneously.\n        \"\"\"\n        return {\n            0: \"W\",  # Forward\n            1: \"A\",  # Left\n            2: \"S\",  # Backward\n            3: \"D\",  # Right\n            4: \"SPACE\",  # Jump\n            5: \"LEFT_SHIFT\",  # Dodge/Sprint\n            6: \"E\",  # Interact\n            7: \"LEFT_ALT\",  # Heavy attack modifier key\n            8: \"R\",  # Use item\n            9: \"F\",  # Weapon art\n            10: \"LEFT\",  # Attack key\n        }\n\n    def _discrete_action_map(self):\n        \"\"\"Action mapping\"\"\"\n        return {\n            0: {\"name\": \"no-op\", \"type\": ActionType.INSTANT},\n            1: {\"name\": \"forward\", \"type\": ActionType.MOVEMENT},\n            2: {\"name\": \"backward\", \"type\": ActionType.MOVEMENT},\n            3: {\"name\": \"left\", \"type\": ActionType.MOVEMENT},\n            4: {\"name\": \"right\", \"type\": ActionType.MOVEMENT},\n            5: {\"name\": \"jump\", \"type\": ActionType.DODGE},\n            6: {\"name\": \"dodge_forward\", \"type\": ActionType.DODGE},\n            7: {\"name\": \"dodge_backward\", \"type\": ActionType.DODGE},\n            8: {\"name\": \"dodge_left\", \"type\": ActionType.DODGE},\n            9: {\"name\": \"dodge_right\", \"type\": ActionType.DODGE},\n            10: {\"name\": \"interact\", \"type\": ActionType.INSTANT},\n            11: {\"name\": \"attack\", \"type\": ActionType.COMBAT},\n            12: {\"name\": \"use_item\", \"type\": ActionType.COMBAT},\n            13: {\"name\": \"weapon_art\", \"type\": ActionType.COMBAT},\n        }\n\n    def _discrete_action_keybindings(self):\n        \"\"\"Keybindings for each action\"\"\"\n        return {\n            \"no-op\": [],\n            \"forward\": [[\"W\"], 500, 0],\n            \"backward\": [[\"S\"], 500, 0],\n            \"left\": [[\"A\"], 500, 0],\n            \"right\": [[\"D\"], 500, 0],\n            \"jump\": [[\"SPACE\"], 500, 0],\n            \"dodge_forward\": [[\"W\", \"LEFT_SHIFT\"], 100, 200],\n            \"dodge_backward\": [[\"S\", \"LEFT_SHIFT\"], 100, 200],\n            \"dodge_left\": [[\"A\", \"LEFT_SHIFT\"], 100, 200],\n            \"dodge_right\": [[\"D\", \"LEFT_SHIFT\"], 100, 200],\n            \"interact\": [[\"E\"], 500, 0],\n            \"attack\": [[\"LEFT_ALT\", \"LEFT\"], 400, 0],\n            \"use_item\": [[\"R\"], 500, 0],\n            \"weapon_art\": [[\"F\"], 500, 0],\n        }\n\n    def reset(self, seed=None, options=None):\n        \"\"\"Reset environment - start new episode.\"\"\"\n        super().reset(seed=seed)\n\n        # Set game speed\n        self.client.set_game_speed(self.game_speed)\n\n        # Reset game and start scenario\n        if self.first_load:\n            self.first_load = False\n        else:\n            self.client.reset_game()\n\n        self.client.start_scenario(self.scenario_name)\n        sleep(1)  # Wait for fight to start\n\n        # Reset state\n        self._prev_info = None\n        self._last_animation_id = self.client.player_animation_id\n\n        # Get initial observation\n        obs = self._get_observation()\n        info = self._get_info()\n        self._prev_info = info.copy()\n\n        if self.freeze_game:\n            self.client.set_game_speed(1e-5)\n\n        return obs, info\n\n    def step(self, action):\n        \"\"\"\n        Execute one step\n\n        send action, wait frame_skip frames, return observation.\n\n        Args:\n            action: int (discrete mode) or array (multi_binary mode)\n\n        Returns:\n            tuple: (observation, reward, terminated, truncated, info)\n        \"\"\"\n\n        if self.freeze_game:\n            self.client.set_game_speed(self.game_speed)\n\n        # Send action based on mode\n\n        if self.action_mode == \"discrete\":\n            # Discrete: single action ID\n            action_data = self.action_map[action]\n            action_name = action_data[\"name\"]\n\n            if action_name != \"no-op\":\n                keybinding = self.action_keybindings.get(action_name, [])\n                if keybinding:\n                    self.client.send_key(*keybinding)\n\n        elif self.action_mode == \"multi_binary\":\n            # Multi-binary: array of 0s and 1s\n            # Collect all keys that should be pressed (where action[i] == 1)\n            keys_to_press = []\n            for i, should_press in enumerate(action):\n                if should_press == 1:\n                    keys_to_press.append(self.action_map[i])\n\n            # Send all keys simultaneously if any\n            if keys_to_press:\n                self.client.send_key(keys_to_press, 100, 0)  # Press all together\n\n        # Wait frame_skip frames (like Atari)\n        # Game runs at ~60fps, so frame_skip=4 means ~0.067s between observations\n        sleep(self.frame_skip / self.game_fps)\n\n        if self.freeze_game:\n            self.client.set_game_speed(1e-5)\n\n        # Get observation\n        obs = self._get_observation()\n        info = self._get_info()\n\n        # Calculate reward\n        reward = self.reward_function.calculate(obs, info, self._prev_info)\n\n        # Check termination\n        terminated = self.reward_function.is_done(obs, info)\n        truncated = (\n            self.step_count &gt;= self.max_step if self.max_step is not None else False\n        )\n\n        if terminated or truncated:\n            self.step_count = 0\n        else:\n            self.step_count += 1\n\n        # Update state\n        self._prev_info = info.copy()\n        self._last_animation_id = self.client.player_animation_id\n\n        return obs, reward, terminated, truncated, info\n\n    def _get_observation(self):\n        \"\"\"\n        Get raw observation - let agent figure out timing.\n\n        Returns:\n            dict: Observation with:\n                - frame: Game frame/image\n                - boss_hp: Boss health (0.0-1.0)\n                - player_hp: Player health (0.0-1.0)\n                - distance: Distance to boss\n                - boss_animation_id: Boss animation (for predicting attacks)\n                - player_animation_id: Player animation (for knowing if stuck in animation)\n                - last_animation_id: Previous player animation (to detect changes)\n        \"\"\"\n        frame = self.client.get_frame()\n\n        return {\n            \"frame\": frame,\n            \"boss_hp\": self.client.target_hp / self.client.target_max_hp,\n            \"player_hp\": self.client.player_hp / self.client.player_max_hp,\n            \"distance\": self.client.target_player_distance,\n            \"boss_animation_id\": self.client.target_animation_id,\n            \"player_animation_id\": self.client.player_animation_id,\n            \"last_animation_id\": self._last_animation_id,\n        }\n\n    def _get_info(self):\n        \"\"\"Extra debug info\"\"\"\n        return {\n            \"player_hp\": self.client.player_hp,\n            \"boss_hp\": self.client.target_hp,\n        }\n\n    def close(self):\n        \"\"\"\n        Close the environment and clean up resources.\n\n        This method closes the connection to the siphon client.\n        \"\"\"\n        self.client.close()\n</code></pre>"},{"location":"api/env/#eldengym.env.EldenGymEnv.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the environment and clean up resources.</p> <p>This method closes the connection to the siphon client.</p> Source code in <code>eldengym/env.py</code> <pre><code>def close(self):\n    \"\"\"\n    Close the environment and clean up resources.\n\n    This method closes the connection to the siphon client.\n    \"\"\"\n    self.client.close()\n</code></pre>"},{"location":"api/env/#eldengym.env.EldenGymEnv.reset","title":"reset","text":"<pre><code>reset(seed=None, options=None)\n</code></pre> <p>Reset environment - start new episode.</p> Source code in <code>eldengym/env.py</code> <pre><code>def reset(self, seed=None, options=None):\n    \"\"\"Reset environment - start new episode.\"\"\"\n    super().reset(seed=seed)\n\n    # Set game speed\n    self.client.set_game_speed(self.game_speed)\n\n    # Reset game and start scenario\n    if self.first_load:\n        self.first_load = False\n    else:\n        self.client.reset_game()\n\n    self.client.start_scenario(self.scenario_name)\n    sleep(1)  # Wait for fight to start\n\n    # Reset state\n    self._prev_info = None\n    self._last_animation_id = self.client.player_animation_id\n\n    # Get initial observation\n    obs = self._get_observation()\n    info = self._get_info()\n    self._prev_info = info.copy()\n\n    if self.freeze_game:\n        self.client.set_game_speed(1e-5)\n\n    return obs, info\n</code></pre>"},{"location":"api/env/#eldengym.env.EldenGymEnv.step","title":"step","text":"<pre><code>step(action)\n</code></pre> <p>Execute one step</p> <p>send action, wait frame_skip frames, return observation.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <p>int (discrete mode) or array (multi_binary mode)</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>(observation, reward, terminated, truncated, info)</p> Source code in <code>eldengym/env.py</code> <pre><code>def step(self, action):\n    \"\"\"\n    Execute one step\n\n    send action, wait frame_skip frames, return observation.\n\n    Args:\n        action: int (discrete mode) or array (multi_binary mode)\n\n    Returns:\n        tuple: (observation, reward, terminated, truncated, info)\n    \"\"\"\n\n    if self.freeze_game:\n        self.client.set_game_speed(self.game_speed)\n\n    # Send action based on mode\n\n    if self.action_mode == \"discrete\":\n        # Discrete: single action ID\n        action_data = self.action_map[action]\n        action_name = action_data[\"name\"]\n\n        if action_name != \"no-op\":\n            keybinding = self.action_keybindings.get(action_name, [])\n            if keybinding:\n                self.client.send_key(*keybinding)\n\n    elif self.action_mode == \"multi_binary\":\n        # Multi-binary: array of 0s and 1s\n        # Collect all keys that should be pressed (where action[i] == 1)\n        keys_to_press = []\n        for i, should_press in enumerate(action):\n            if should_press == 1:\n                keys_to_press.append(self.action_map[i])\n\n        # Send all keys simultaneously if any\n        if keys_to_press:\n            self.client.send_key(keys_to_press, 100, 0)  # Press all together\n\n    # Wait frame_skip frames (like Atari)\n    # Game runs at ~60fps, so frame_skip=4 means ~0.067s between observations\n    sleep(self.frame_skip / self.game_fps)\n\n    if self.freeze_game:\n        self.client.set_game_speed(1e-5)\n\n    # Get observation\n    obs = self._get_observation()\n    info = self._get_info()\n\n    # Calculate reward\n    reward = self.reward_function.calculate(obs, info, self._prev_info)\n\n    # Check termination\n    terminated = self.reward_function.is_done(obs, info)\n    truncated = (\n        self.step_count &gt;= self.max_step if self.max_step is not None else False\n    )\n\n    if terminated or truncated:\n        self.step_count = 0\n    else:\n        self.step_count += 1\n\n    # Update state\n    self._prev_info = info.copy()\n    self._last_animation_id = self.client.player_animation_id\n\n    return obs, reward, terminated, truncated, info\n</code></pre>"},{"location":"api/env/#methods","title":"Methods","text":""},{"location":"api/env/#core-gymnasium-methods","title":"Core Gymnasium Methods","text":""},{"location":"api/env/#reset","title":"<code>reset()</code>","text":"<p>Reset the environment to initial state.</p> <p>Returns: - <code>observation</code> (np.ndarray): Initial observation - <code>info</code> (dict): Additional information</p> <p>Example: <pre><code>obs, info = env.reset()\nprint(f\"Starting HP: {info['player_hp']}\")\n</code></pre></p>"},{"location":"api/env/#stepaction","title":"<code>step(action)</code>","text":"<p>Execute one step in the environment.</p> <p>Args: - <code>action</code> (int | np.ndarray): Action to take</p> <p>Returns: - <code>observation</code> (np.ndarray): New observation - <code>reward</code> (float): Reward for the action - <code>terminated</code> (bool): Whether episode ended (boss defeated/player died) - <code>truncated</code> (bool): Whether episode was truncated (max steps) - <code>info</code> (dict): Additional information</p> <p>Example: <pre><code>obs, reward, terminated, truncated, info = env.step(action)\nif terminated:\n    print(f\"Episode ended! Final reward: {reward}\")\n</code></pre></p>"},{"location":"api/env/#close","title":"<code>close()</code>","text":"<p>Clean up environment resources.</p> <pre><code>env.close()\n</code></pre>"},{"location":"api/env/#rendering","title":"Rendering","text":""},{"location":"api/env/#render","title":"<code>render()</code>","text":"<p>Return current game frame.</p> <p>Returns: - <code>np.ndarray</code>: RGB frame (H, W, 3)</p> <p>Example: <pre><code>import matplotlib.pyplot as plt\n\nframe = env.render()\nplt.imshow(frame)\nplt.show()\n</code></pre></p>"},{"location":"api/env/#properties","title":"Properties","text":""},{"location":"api/env/#action-space","title":"Action Space","text":"<p>The action space depends on the <code>action_mode</code> parameter:</p> <p>Discrete (default): <pre><code>env.action_space  # Discrete(9)\n# 0: no-op\n# 1: forward\n# 2: backward\n# 3: left\n# 4: right\n# 5: attack\n# 6: dodge\n# 7: lock-on\n# 8: use-item\n</code></pre></p> <p>Multi-Binary: <pre><code>env.action_space  # MultiBinary(8)\n# [forward, backward, left, right, attack, dodge, lock-on, use-item]\n</code></pre></p>"},{"location":"api/env/#observation-space","title":"Observation Space","text":"<p>RGB Frame only: <pre><code>env.observation_space  # Box(0, 255, (H, W, 3), uint8)\n</code></pre></p> <p>With game state: <pre><code>env.observation_space  # Dict({\n#   'frame': Box(0, 255, (H, W, 3), uint8),\n#   'player_hp': Box(0, inf, (1,), float32),\n#   'player_max_hp': Box(0, inf, (1,), float32),\n#   'target_hp': Box(0, inf, (1,), float32),\n#   'target_max_hp': Box(0, inf, (1,), float32),\n#   ...\n# })\n</code></pre></p>"},{"location":"api/env/#info-dictionary","title":"Info Dictionary","text":"<p>The <code>info</code> dict returned by <code>step()</code> and <code>reset()</code> contains:</p> Key Type Description <code>player_hp</code> int Player's current HP <code>player_max_hp</code> int Player's maximum HP <code>target_hp</code> int Target/boss current HP <code>target_max_hp</code> int Target/boss maximum HP <code>distance</code> float Distance to target <code>player_animation_id</code> int Current player animation <code>target_animation_id</code> int Current target animation <code>step_count</code> int Steps in current episode"},{"location":"api/env/#configuration","title":"Configuration","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n\n    # Scenario\n    scenario_name=\"margit\",  # Boss fight scenario\n\n    # Connection\n    host=\"localhost:50051\",  # Siphon server address\n    config_filepath=\"ER_1_16_1.toml\",  # Memory config\n\n    # Action space\n    action_mode=\"discrete\",  # \"discrete\", \"multi_binary\", or \"continuous\"\n\n    # Observation space\n    observation_mode=\"rgb\",  # \"rgb\" or \"dict\"\n\n    # Rewards\n    reward_function=None,  # Custom reward function\n\n    # Game settings\n    frame_skip=4,  # Frames to skip (like Atari)\n    game_speed=1.0,  # Game speed multiplier\n    freeze_game=False,  # Freeze game between steps\n    game_fps=60,  # Target FPS\n\n    # Episode settings\n    max_step=None,  # Max steps before truncation (None = no limit)\n)\n</code></pre>"},{"location":"api/siphon-client/","title":"SiphonClient API","text":"<p>The <code>SiphonClient</code> class provides low-level gRPC communication with the Siphon server.</p>"},{"location":"api/siphon-client/#siphonclient","title":"SiphonClient","text":""},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient","title":"SiphonClient","text":"<p>Client for the Siphon service.</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>class SiphonClient:\n    \"\"\"\n    Client for the Siphon service.\n    \"\"\"\n\n    def __init__(\n        self,\n        host=\"localhost:50051\",\n        max_receive_message_length=100 * 1024 * 1024,\n        max_send_message_length=100 * 1024 * 1024,\n    ):\n        \"\"\"\n        Args:\n            host: string, host of the server\n            max_receive_message_length: int, maximum length of the receive message\n            max_send_message_length: int, maximum length of the send message\n        \"\"\"\n        self.channel = grpc.insecure_channel(\n            host,\n            options=[\n                (\"grpc.max_receive_message_length\", max_receive_message_length),\n                (\"grpc.max_send_message_length\", max_send_message_length),\n            ],\n        )\n        self.stub = siphon_service_pb2_grpc.SiphonServiceStub(self.channel)\n\n    def send_key(self, keys, hold_time, delay_time=0):\n        \"\"\"\n        Send a key to the server.\n        Args:\n            keys: list of strings, keys to press, e.g., ['w', 'space']\n            hold_time: string, time to hold the key in milliseconds\n            delay_time: string, time to delay between keys in milliseconds\n        \"\"\"\n        request = siphon_service_pb2.InputKeyTapRequest(\n            keys=keys, hold_ms=hold_time, delay_ms=delay_time\n        )\n        return self.stub.InputKeyTap(request)\n\n    def get_attribute(self, attributeName):\n        \"\"\"\n        Read memory value for a single attribute.\n        Args:\n            attributeName: string, name of the attribute\n        \"\"\"\n        request = siphon_service_pb2.GetSiphonRequest(attributeName=attributeName)\n        response = self.stub.GetAttribute(request)\n\n        # Handle oneof value field\n        if response.HasField(\"int_value\"):\n            return response.int_value\n        elif response.HasField(\"float_value\"):\n            return response.float_value\n        elif response.HasField(\"array_value\"):\n            return response.array_value\n        else:\n            return None\n\n    def set_attribute(self, attributeName, value):\n        \"\"\"\n        Set the value of an attribute.\n        Args:\n            attributeName: string, name of the attribute\n            value: int, float, or bytes - the value to set\n        \"\"\"\n        request = siphon_service_pb2.SetSiphonRequest(attributeName=attributeName)\n\n        # Handle oneof value field based on type\n        if isinstance(value, int):\n            request.int_value = value\n        elif isinstance(value, float):\n            request.float_value = value\n        elif isinstance(value, bytes):\n            request.array_value = value\n        else:\n            raise ValueError(\n                f\"Unsupported value type: {type(value)}. Must be int, float, or bytes.\"\n            )\n\n        return self.stub.SetAttribute(request)\n\n    def get_frame(self):\n        \"\"\"\n        Get current frame as numpy array.\n        \"\"\"\n        request = siphon_service_pb2.CaptureFrameRequest()\n        response = self.stub.CaptureFrame(request)\n        # Server sends BGRA format (32 bits per pixel = 4 bytes per pixel)\n        frame = np.frombuffer(response.frame, dtype=np.uint8)\n        frame = frame.reshape(response.height, response.width, 4)  # BGRA format\n\n        # Convert BGRA to BGR for OpenCV (remove alpha channel)\n        frame = frame[:, :, :3]  # Remove alpha channel\n\n        # save_path = os.path.join(os.path.dirname(__file__), 'frame.png')\n        # cv2.imwrite(save_path, frame)\n        return frame\n\n    def move_mouse(self, delta_x, delta_y, steps=1):\n        \"\"\"\n        Move the mouse by the given delta.\n        \"\"\"\n        request = siphon_service_pb2.MoveMouseRequest(\n            delta_x=delta_x, delta_y=delta_y, steps=steps\n        )\n        return self.stub.MoveMouse(request)\n\n    def toggle_key(self, key, toggle):\n        \"\"\"\n        Press or release a key.\n        Args:\n            key: string, key to toggle, e.g., 'w'\n            toggle: bool, True to press, False to release\n        \"\"\"\n        request = siphon_service_pb2.InputKeyToggleRequest(key=key, toggle=toggle)\n        return self.stub.InputKeyToggle(request)\n\n    def execute_command(\n        self,\n        command,\n        args=None,\n        working_directory=\"\",\n        timeout_seconds=30,\n        capture_output=True,\n    ):\n        \"\"\"\n        Execute a command on the server.\n        Args:\n            command: string, command to execute\n            args: list of strings, command arguments\n            working_directory: string, working directory for the command\n            timeout_seconds: int, timeout in seconds\n            capture_output: bool, whether to capture output\n        Returns:\n            ExecuteCommandResponse with fields: success, message, exit_code,\n            stdout_output, stderr_output, execution_time_ms\n        \"\"\"\n        if args is None:\n            args = []\n        request = siphon_service_pb2.ExecuteCommandRequest(\n            command=command,\n            args=args,\n            working_directory=working_directory,\n            timeout_seconds=timeout_seconds,\n            capture_output=capture_output,\n        )\n        return self.stub.ExecuteCommand(request)\n\n    def set_process_config(self, process_name, process_window_name, attributes):\n        \"\"\"\n        Set the process configuration.\n        Args:\n            process_name: string, name of the process\n            process_window_name: string, window name of the process\n            attributes: list of dicts with keys: name, pattern, offsets, type, length, method\n                Example: [\n                    {\n                        'name': 'health',\n                        'pattern': 'AB CD EF',\n                        'offsets': [0x10, 0x20],\n                        'type': 'int',\n                        'length': 4,\n                        'method': ''\n                    }\n                ]\n        \"\"\"\n        request = siphon_service_pb2.SetProcessConfigRequest(\n            process_name=process_name, process_window_name=process_window_name\n        )\n\n        for attr in attributes:\n            proto_attr = request.attributes.add()\n            proto_attr.name = attr.get(\"name\", \"\")\n            proto_attr.pattern = attr.get(\"pattern\", \"\")\n            proto_attr.offsets.extend(attr.get(\"offsets\", []))\n            proto_attr.type = attr.get(\"type\", \"\")\n            proto_attr.length = attr.get(\"length\", 0)\n            proto_attr.method = attr.get(\"method\", \"\")\n\n        return self.stub.SetProcessConfig(request)\n\n    def initialize_memory(self):\n        \"\"\"\n        Initialize the memory subsystem.\n        Returns:\n            InitializeMemoryResponse with fields: success, message, process_id\n        \"\"\"\n        request = siphon_service_pb2.InitializeMemoryRequest()\n        return self.stub.InitializeMemory(request)\n\n    def initialize_input(self, window_name=\"\"):\n        \"\"\"\n        Initialize the input subsystem.\n        Args:\n            window_name: string, window name to target (optional)\n        Returns:\n            InitializeInputResponse with fields: success, message\n        \"\"\"\n        request = siphon_service_pb2.InitializeInputRequest(window_name=window_name)\n        return self.stub.InitializeInput(request)\n\n    def initialize_capture(self, window_name=\"\"):\n        \"\"\"\n        Initialize the capture subsystem.\n        Args:\n            window_name: string, window name to target (optional)\n        Returns:\n            InitializeCaptureResponse with fields: success, message, window_width, window_height\n        \"\"\"\n        request = siphon_service_pb2.InitializeCaptureRequest(window_name=window_name)\n        return self.stub.InitializeCapture(request)\n\n    def get_server_status(self):\n        \"\"\"\n        Get the server initialization status.\n        Returns:\n            GetServerStatusResponse with fields: success, message, config_set,\n            memory_initialized, input_initialized, capture_initialized,\n            process_name, window_name, process_id\n        \"\"\"\n        request = siphon_service_pb2.GetServerStatusRequest()\n        return self.stub.GetServerStatus(request)\n\n    def close(self):\n        \"\"\"\n        Close the channel.\n        \"\"\"\n        self.channel.close()\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    host=\"localhost:50051\",\n    max_receive_message_length=100 * 1024 * 1024,\n    max_send_message_length=100 * 1024 * 1024,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>host</code> <p>string, host of the server</p> <code>'localhost:50051'</code> <code>max_receive_message_length</code> <p>int, maximum length of the receive message</p> <code>100 * 1024 * 1024</code> <code>max_send_message_length</code> <p>int, maximum length of the send message</p> <code>100 * 1024 * 1024</code> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def __init__(\n    self,\n    host=\"localhost:50051\",\n    max_receive_message_length=100 * 1024 * 1024,\n    max_send_message_length=100 * 1024 * 1024,\n):\n    \"\"\"\n    Args:\n        host: string, host of the server\n        max_receive_message_length: int, maximum length of the receive message\n        max_send_message_length: int, maximum length of the send message\n    \"\"\"\n    self.channel = grpc.insecure_channel(\n        host,\n        options=[\n            (\"grpc.max_receive_message_length\", max_receive_message_length),\n            (\"grpc.max_send_message_length\", max_send_message_length),\n        ],\n    )\n    self.stub = siphon_service_pb2_grpc.SiphonServiceStub(self.channel)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the channel.</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def close(self):\n    \"\"\"\n    Close the channel.\n    \"\"\"\n    self.channel.close()\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.execute_command","title":"execute_command","text":"<pre><code>execute_command(\n    command,\n    args=None,\n    working_directory=\"\",\n    timeout_seconds=30,\n    capture_output=True,\n)\n</code></pre> <p>Execute a command on the server. Args:     command: string, command to execute     args: list of strings, command arguments     working_directory: string, working directory for the command     timeout_seconds: int, timeout in seconds     capture_output: bool, whether to capture output Returns:     ExecuteCommandResponse with fields: success, message, exit_code,     stdout_output, stderr_output, execution_time_ms</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def execute_command(\n    self,\n    command,\n    args=None,\n    working_directory=\"\",\n    timeout_seconds=30,\n    capture_output=True,\n):\n    \"\"\"\n    Execute a command on the server.\n    Args:\n        command: string, command to execute\n        args: list of strings, command arguments\n        working_directory: string, working directory for the command\n        timeout_seconds: int, timeout in seconds\n        capture_output: bool, whether to capture output\n    Returns:\n        ExecuteCommandResponse with fields: success, message, exit_code,\n        stdout_output, stderr_output, execution_time_ms\n    \"\"\"\n    if args is None:\n        args = []\n    request = siphon_service_pb2.ExecuteCommandRequest(\n        command=command,\n        args=args,\n        working_directory=working_directory,\n        timeout_seconds=timeout_seconds,\n        capture_output=capture_output,\n    )\n    return self.stub.ExecuteCommand(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.get_attribute","title":"get_attribute","text":"<pre><code>get_attribute(attributeName)\n</code></pre> <p>Read memory value for a single attribute. Args:     attributeName: string, name of the attribute</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def get_attribute(self, attributeName):\n    \"\"\"\n    Read memory value for a single attribute.\n    Args:\n        attributeName: string, name of the attribute\n    \"\"\"\n    request = siphon_service_pb2.GetSiphonRequest(attributeName=attributeName)\n    response = self.stub.GetAttribute(request)\n\n    # Handle oneof value field\n    if response.HasField(\"int_value\"):\n        return response.int_value\n    elif response.HasField(\"float_value\"):\n        return response.float_value\n    elif response.HasField(\"array_value\"):\n        return response.array_value\n    else:\n        return None\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.get_frame","title":"get_frame","text":"<pre><code>get_frame()\n</code></pre> <p>Get current frame as numpy array.</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def get_frame(self):\n    \"\"\"\n    Get current frame as numpy array.\n    \"\"\"\n    request = siphon_service_pb2.CaptureFrameRequest()\n    response = self.stub.CaptureFrame(request)\n    # Server sends BGRA format (32 bits per pixel = 4 bytes per pixel)\n    frame = np.frombuffer(response.frame, dtype=np.uint8)\n    frame = frame.reshape(response.height, response.width, 4)  # BGRA format\n\n    # Convert BGRA to BGR for OpenCV (remove alpha channel)\n    frame = frame[:, :, :3]  # Remove alpha channel\n\n    # save_path = os.path.join(os.path.dirname(__file__), 'frame.png')\n    # cv2.imwrite(save_path, frame)\n    return frame\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.get_server_status","title":"get_server_status","text":"<pre><code>get_server_status()\n</code></pre> <p>Get the server initialization status. Returns:     GetServerStatusResponse with fields: success, message, config_set,     memory_initialized, input_initialized, capture_initialized,     process_name, window_name, process_id</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def get_server_status(self):\n    \"\"\"\n    Get the server initialization status.\n    Returns:\n        GetServerStatusResponse with fields: success, message, config_set,\n        memory_initialized, input_initialized, capture_initialized,\n        process_name, window_name, process_id\n    \"\"\"\n    request = siphon_service_pb2.GetServerStatusRequest()\n    return self.stub.GetServerStatus(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.initialize_capture","title":"initialize_capture","text":"<pre><code>initialize_capture(window_name='')\n</code></pre> <p>Initialize the capture subsystem. Args:     window_name: string, window name to target (optional) Returns:     InitializeCaptureResponse with fields: success, message, window_width, window_height</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def initialize_capture(self, window_name=\"\"):\n    \"\"\"\n    Initialize the capture subsystem.\n    Args:\n        window_name: string, window name to target (optional)\n    Returns:\n        InitializeCaptureResponse with fields: success, message, window_width, window_height\n    \"\"\"\n    request = siphon_service_pb2.InitializeCaptureRequest(window_name=window_name)\n    return self.stub.InitializeCapture(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.initialize_input","title":"initialize_input","text":"<pre><code>initialize_input(window_name='')\n</code></pre> <p>Initialize the input subsystem. Args:     window_name: string, window name to target (optional) Returns:     InitializeInputResponse with fields: success, message</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def initialize_input(self, window_name=\"\"):\n    \"\"\"\n    Initialize the input subsystem.\n    Args:\n        window_name: string, window name to target (optional)\n    Returns:\n        InitializeInputResponse with fields: success, message\n    \"\"\"\n    request = siphon_service_pb2.InitializeInputRequest(window_name=window_name)\n    return self.stub.InitializeInput(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.initialize_memory","title":"initialize_memory","text":"<pre><code>initialize_memory()\n</code></pre> <p>Initialize the memory subsystem. Returns:     InitializeMemoryResponse with fields: success, message, process_id</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def initialize_memory(self):\n    \"\"\"\n    Initialize the memory subsystem.\n    Returns:\n        InitializeMemoryResponse with fields: success, message, process_id\n    \"\"\"\n    request = siphon_service_pb2.InitializeMemoryRequest()\n    return self.stub.InitializeMemory(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.move_mouse","title":"move_mouse","text":"<pre><code>move_mouse(delta_x, delta_y, steps=1)\n</code></pre> <p>Move the mouse by the given delta.</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def move_mouse(self, delta_x, delta_y, steps=1):\n    \"\"\"\n    Move the mouse by the given delta.\n    \"\"\"\n    request = siphon_service_pb2.MoveMouseRequest(\n        delta_x=delta_x, delta_y=delta_y, steps=steps\n    )\n    return self.stub.MoveMouse(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.send_key","title":"send_key","text":"<pre><code>send_key(keys, hold_time, delay_time=0)\n</code></pre> <p>Send a key to the server. Args:     keys: list of strings, keys to press, e.g., ['w', 'space']     hold_time: string, time to hold the key in milliseconds     delay_time: string, time to delay between keys in milliseconds</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def send_key(self, keys, hold_time, delay_time=0):\n    \"\"\"\n    Send a key to the server.\n    Args:\n        keys: list of strings, keys to press, e.g., ['w', 'space']\n        hold_time: string, time to hold the key in milliseconds\n        delay_time: string, time to delay between keys in milliseconds\n    \"\"\"\n    request = siphon_service_pb2.InputKeyTapRequest(\n        keys=keys, hold_ms=hold_time, delay_ms=delay_time\n    )\n    return self.stub.InputKeyTap(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.set_attribute","title":"set_attribute","text":"<pre><code>set_attribute(attributeName, value)\n</code></pre> <p>Set the value of an attribute. Args:     attributeName: string, name of the attribute     value: int, float, or bytes - the value to set</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def set_attribute(self, attributeName, value):\n    \"\"\"\n    Set the value of an attribute.\n    Args:\n        attributeName: string, name of the attribute\n        value: int, float, or bytes - the value to set\n    \"\"\"\n    request = siphon_service_pb2.SetSiphonRequest(attributeName=attributeName)\n\n    # Handle oneof value field based on type\n    if isinstance(value, int):\n        request.int_value = value\n    elif isinstance(value, float):\n        request.float_value = value\n    elif isinstance(value, bytes):\n        request.array_value = value\n    else:\n        raise ValueError(\n            f\"Unsupported value type: {type(value)}. Must be int, float, or bytes.\"\n        )\n\n    return self.stub.SetAttribute(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.set_process_config","title":"set_process_config","text":"<pre><code>set_process_config(\n    process_name, process_window_name, attributes\n)\n</code></pre> <p>Set the process configuration. Args:     process_name: string, name of the process     process_window_name: string, window name of the process     attributes: list of dicts with keys: name, pattern, offsets, type, length, method         Example: [             {                 'name': 'health',                 'pattern': 'AB CD EF',                 'offsets': [0x10, 0x20],                 'type': 'int',                 'length': 4,                 'method': ''             }         ]</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def set_process_config(self, process_name, process_window_name, attributes):\n    \"\"\"\n    Set the process configuration.\n    Args:\n        process_name: string, name of the process\n        process_window_name: string, window name of the process\n        attributes: list of dicts with keys: name, pattern, offsets, type, length, method\n            Example: [\n                {\n                    'name': 'health',\n                    'pattern': 'AB CD EF',\n                    'offsets': [0x10, 0x20],\n                    'type': 'int',\n                    'length': 4,\n                    'method': ''\n                }\n            ]\n    \"\"\"\n    request = siphon_service_pb2.SetProcessConfigRequest(\n        process_name=process_name, process_window_name=process_window_name\n    )\n\n    for attr in attributes:\n        proto_attr = request.attributes.add()\n        proto_attr.name = attr.get(\"name\", \"\")\n        proto_attr.pattern = attr.get(\"pattern\", \"\")\n        proto_attr.offsets.extend(attr.get(\"offsets\", []))\n        proto_attr.type = attr.get(\"type\", \"\")\n        proto_attr.length = attr.get(\"length\", 0)\n        proto_attr.method = attr.get(\"method\", \"\")\n\n    return self.stub.SetProcessConfig(request)\n</code></pre>"},{"location":"api/siphon-client/#eldengym.client.siphon_client.SiphonClient.toggle_key","title":"toggle_key","text":"<pre><code>toggle_key(key, toggle)\n</code></pre> <p>Press or release a key. Args:     key: string, key to toggle, e.g., 'w'     toggle: bool, True to press, False to release</p> Source code in <code>eldengym/client/siphon_client.py</code> <pre><code>def toggle_key(self, key, toggle):\n    \"\"\"\n    Press or release a key.\n    Args:\n        key: string, key to toggle, e.g., 'w'\n        toggle: bool, True to press, False to release\n    \"\"\"\n    request = siphon_service_pb2.InputKeyToggleRequest(key=key, toggle=toggle)\n    return self.stub.InputKeyToggle(request)\n</code></pre>"},{"location":"api/siphon-client/#core-methods","title":"Core Methods","text":""},{"location":"api/siphon-client/#input-control","title":"Input Control","text":""},{"location":"api/siphon-client/#send_keykeys-hold_time-delay_time0","title":"<code>send_key(keys, hold_time, delay_time=0)</code>","text":"<p>Send keyboard input to the game.</p> <p>Args: - <code>keys</code> (list[str]): Keys to press (e.g., <code>['W', 'SPACE']</code>) - <code>hold_time</code> (int): Time to hold keys in milliseconds - <code>delay_time</code> (int): Delay between keys in milliseconds</p> <p>Example: <pre><code># Move forward for 500ms\nclient.send_key(['W'], 500)\n\n# Jump (quick tap)\nclient.send_key(['SPACE'], 100)\n\n# Multiple keys with delay\nclient.send_key(['W', 'SHIFT', 'SPACE'], 200, 100)\n</code></pre></p>"},{"location":"api/siphon-client/#toggle_keykey-toggle","title":"<code>toggle_key(key, toggle)</code>","text":"<p>Press or release a key.</p> <p>Args: - <code>key</code> (str): Key to toggle - <code>toggle</code> (bool): True to press, False to release</p> <pre><code># Hold forward\nclient.toggle_key('W', True)\n# ... do something ...\nclient.toggle_key('W', False)\n</code></pre>"},{"location":"api/siphon-client/#move_mousedelta_x-delta_y-steps1","title":"<code>move_mouse(delta_x, delta_y, steps=1)</code>","text":"<p>Move the mouse cursor.</p> <p>Args: - <code>delta_x</code> (int): Horizontal movement - <code>delta_y</code> (int): Vertical movement - <code>steps</code> (int): Number of steps to interpolate</p> <pre><code># Look right\nclient.move_mouse(100, 0)\n\n# Look down\nclient.move_mouse(0, 50)\n</code></pre>"},{"location":"api/siphon-client/#memory-operations","title":"Memory Operations","text":""},{"location":"api/siphon-client/#get_attributeattribute_name","title":"<code>get_attribute(attribute_name)</code>","text":"<p>Read a memory value.</p> <p>Args: - <code>attribute_name</code> (str): Name of the attribute (from config)</p> <p>Returns: - <code>int | float | bytes</code>: The attribute value</p> <pre><code>hp = client.get_attribute(\"HeroHp\")\nmax_hp = client.get_attribute(\"HeroMaxHp\")\nprint(f\"HP: {hp}/{max_hp}\")\n</code></pre>"},{"location":"api/siphon-client/#set_attributeattribute_name-value","title":"<code>set_attribute(attribute_name, value)</code>","text":"<p>Write a memory value.</p> <p>Args: - <code>attribute_name</code> (str): Name of the attribute - <code>value</code> (int | float | bytes): Value to write</p> <pre><code># Set player HP\nclient.set_attribute(\"HeroHp\", 1000)\n\n# Set game speed\nclient.set_attribute(\"gameSpeedVal\", 2.0)\n</code></pre>"},{"location":"api/siphon-client/#frame-capture","title":"Frame Capture","text":""},{"location":"api/siphon-client/#get_frame","title":"<code>get_frame()</code>","text":"<p>Capture the current game frame.</p> <p>Returns: - <code>np.ndarray</code>: BGR frame (H, W, 3), uint8</p> <pre><code>frame = client.get_frame()\nprint(f\"Frame shape: {frame.shape}\")  # e.g., (1080, 1920, 3)\n</code></pre>"},{"location":"api/siphon-client/#initialization","title":"Initialization","text":""},{"location":"api/siphon-client/#set_process_configprocess_name-process_window_name-attributes","title":"<code>set_process_config(process_name, process_window_name, attributes)</code>","text":"<p>Configure the target process and memory attributes.</p> <p>Args: - <code>process_name</code> (str): Process name (e.g., \"eldenring.exe\") - <code>process_window_name</code> (str): Window name (e.g., \"ELDEN RING\") - <code>attributes</code> (list[dict]): Memory attribute configurations</p> <pre><code>attributes = [\n    {\n        'name': 'HeroHp',\n        'pattern': '48 8B 05 ?? ?? ?? ??',\n        'offsets': [0x10EF8, 0x0, 0x190],\n        'type': 'int',\n        'length': 4,\n        'method': ''\n    }\n]\n\nclient.set_process_config(\"eldenring.exe\", \"ELDEN RING\", attributes)\n</code></pre>"},{"location":"api/siphon-client/#initialize_memory","title":"<code>initialize_memory()</code>","text":"<p>Initialize the memory subsystem.</p> <p>Returns: - <code>InitializeMemoryResponse</code>: Contains <code>success</code>, <code>message</code>, <code>process_id</code></p>"},{"location":"api/siphon-client/#initialize_inputwindow_name","title":"<code>initialize_input(window_name=\"\")</code>","text":"<p>Initialize the input subsystem.</p> <p>Args: - <code>window_name</code> (str): Target window name (optional)</p>"},{"location":"api/siphon-client/#initialize_capturewindow_name","title":"<code>initialize_capture(window_name=\"\")</code>","text":"<p>Initialize the capture subsystem.</p> <p>Args: - <code>window_name</code> (str): Target window name (optional)</p> <p>Returns: - <code>InitializeCaptureResponse</code>: Contains <code>success</code>, <code>message</code>, <code>window_width</code>, <code>window_height</code></p>"},{"location":"api/siphon-client/#get_server_status","title":"<code>get_server_status()</code>","text":"<p>Get current server initialization status.</p> <p>Returns: - <code>GetServerStatusResponse</code>: Server state information</p> <pre><code>status = client.get_server_status()\nprint(f\"Memory initialized: {status.memory_initialized}\")\nprint(f\"Process ID: {status.process_id}\")\n</code></pre>"},{"location":"api/siphon-client/#system-commands","title":"System Commands","text":""},{"location":"api/siphon-client/#execute_commandcommand-argsnone-working_directory-timeout_seconds30-capture_outputtrue","title":"<code>execute_command(command, args=None, working_directory=\"\", timeout_seconds=30, capture_output=True)</code>","text":"<p>Execute a system command on the server.</p> <p>Args: - <code>command</code> (str): Command to execute - <code>args</code> (list[str]): Command arguments - <code>working_directory</code> (str): Working directory - <code>timeout_seconds</code> (int): Command timeout - <code>capture_output</code> (bool): Whether to capture output</p> <p>Returns: - <code>ExecuteCommandResponse</code>: Contains <code>success</code>, <code>message</code>, <code>exit_code</code>, <code>stdout_output</code>, <code>stderr_output</code></p> <pre><code># Start the game\nresponse = client.execute_command(\n    \"eldenring.exe\",\n    working_directory=\"C:/Games/Elden Ring\"\n)\nprint(f\"Exit code: {response.exit_code}\")\n</code></pre>"},{"location":"api/siphon-client/#connection","title":"Connection","text":""},{"location":"api/siphon-client/#close","title":"<code>close()</code>","text":"<p>Close the gRPC connection.</p> <pre><code>client.close()\n</code></pre>"},{"location":"api/siphon-client/#connection-parameters","title":"Connection Parameters","text":"<pre><code>from eldengym.client.siphon_client import SiphonClient\n\nclient = SiphonClient(\n    host=\"localhost:50051\",              # Server address\n    max_receive_message_length=100*1024*1024,  # 100MB\n    max_send_message_length=100*1024*1024,     # 100MB\n)\n</code></pre>"},{"location":"api/siphon-client/#usage-notes","title":"Usage Notes","text":"<p>EldenClient vs SiphonClient</p> <p>For Elden Ring development, use <code>EldenClient</code> which inherits from <code>SiphonClient</code> and provides game-specific helpers. Use <code>SiphonClient</code> directly only for non-Elden Ring applications.</p> <p>Memory Operations</p> <p>Direct memory operations (<code>get_attribute</code>, <code>set_attribute</code>) require proper initialization. Always call initialization methods first.</p>"},{"location":"api/utils/","title":"Utilities API","text":"<p>Helper functions and utilities for EldenGym.</p>"},{"location":"api/utils/#configuration-parsing","title":"Configuration Parsing","text":""},{"location":"api/utils/#eldengym.utils.parse_config_file","title":"parse_config_file","text":"<pre><code>parse_config_file(config_filepath)\n</code></pre> <p>Parse a TOML config file and extract process configuration and attributes.</p> <p>This function mirrors the ParseConfigFile function from the C++ client, reading process information and memory attributes from a TOML configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>config_filepath</code> <p>str or Path, path to the TOML configuration file</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>(process_name, process_window_name, attributes) - process_name: str, name of the process (e.g., \"eldenring.exe\") - process_window_name: str, window name of the process (e.g., \"ELDEN RING\") - attributes: list of dicts, each containing:     - name: str, attribute name     - pattern: str, memory pattern to search for     - offsets: list of int, memory offsets     - type: str, data type (e.g., \"int\", \"float\", \"array\")     - length: int, length for array types (default: 0)     - method: str, method for reading (default: \"\")</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the config file doesn't exist</p> <code>ValueError</code> <p>If the config file is malformed or missing required fields</p> Example <p>process_name, window_name, attrs = parse_config_file(\"config.toml\") print(f\"Process: {process_name}, Window: {window_name}\") print(f\"Attributes: {len(attrs)}\")</p> Source code in <code>eldengym/utils.py</code> <pre><code>def parse_config_file(config_filepath):\n    \"\"\"\n    Parse a TOML config file and extract process configuration and attributes.\n\n    This function mirrors the ParseConfigFile function from the C++ client,\n    reading process information and memory attributes from a TOML configuration file.\n\n    Args:\n        config_filepath: str or Path, path to the TOML configuration file\n\n    Returns:\n        tuple: (process_name, process_window_name, attributes)\n            - process_name: str, name of the process (e.g., \"eldenring.exe\")\n            - process_window_name: str, window name of the process (e.g., \"ELDEN RING\")\n            - attributes: list of dicts, each containing:\n                - name: str, attribute name\n                - pattern: str, memory pattern to search for\n                - offsets: list of int, memory offsets\n                - type: str, data type (e.g., \"int\", \"float\", \"array\")\n                - length: int, length for array types (default: 0)\n                - method: str, method for reading (default: \"\")\n\n    Raises:\n        FileNotFoundError: If the config file doesn't exist\n        ValueError: If the config file is malformed or missing required fields\n\n    Example:\n        &gt;&gt;&gt; process_name, window_name, attrs = parse_config_file(\"config.toml\")\n        &gt;&gt;&gt; print(f\"Process: {process_name}, Window: {window_name}\")\n        &gt;&gt;&gt; print(f\"Attributes: {len(attrs)}\")\n    \"\"\"\n    config_path = Path(config_filepath)\n\n    if not config_path.exists():\n        raise FileNotFoundError(f\"Config file not found: {config_filepath}\")\n\n    # Read and parse TOML file\n    with open(config_path, \"rb\") as f:\n        config = tomllib.load(f)\n\n    # Extract process info\n    if \"process_info\" not in config:\n        raise ValueError(\"Missing [process_info] section in config file\")\n\n    process_info = config[\"process_info\"]\n    process_name = process_info.get(\"name\", \"\")\n    process_window_name = process_info.get(\"window_name\", \"\")\n\n    if not process_name:\n        raise ValueError(\"Missing 'name' field in [process_info] section\")\n\n    # Extract attributes\n    if \"attributes\" not in config:\n        raise ValueError(\"Missing [attributes] section in config file\")\n\n    attributes = []\n    attributes_section = config[\"attributes\"]\n\n    for attr_name, attr_data in attributes_section.items():\n        if not isinstance(attr_data, dict):\n            continue\n\n        attribute = {\n            \"name\": attr_name,\n            \"pattern\": attr_data.get(\"pattern\", \"\"),\n            \"offsets\": attr_data.get(\"offsets\", []),\n            \"type\": attr_data.get(\"type\", \"\"),\n            \"length\": attr_data.get(\"length\", 0),\n            \"method\": attr_data.get(\"method\", \"\"),\n        }\n\n        attributes.append(attribute)\n\n    return process_name, process_window_name, attributes\n</code></pre>"},{"location":"api/utils/#example","title":"Example","text":"<pre><code>from eldengym.utils import parse_config_file\n\n# Parse a TOML config file\nprocess_name, window_name, attributes = parse_config_file(\n    \"eldengym/files/configs/ER_1_16_1.toml\"\n)\n\nprint(f\"Process: {process_name}\")\nprint(f\"Window: {window_name}\")\nprint(f\"Attributes: {len(attributes)}\")\n\n# Inspect an attribute\nattr = attributes[0]\nprint(f\"Name: {attr['name']}\")\nprint(f\"Type: {attr['type']}\")\nprint(f\"Pattern: {attr['pattern']}\")\nprint(f\"Offsets: {attr['offsets']}\")\n</code></pre>"},{"location":"api/utils/#config-file-format","title":"Config File Format","text":"<p>TOML configuration files define the game process and memory attributes:</p> <pre><code>[process_info]\nname = \"eldenring.exe\"\nwindow_name = \"ELDEN RING\"\n\n[attributes.HeroHp]\npattern = \"48 8B 05 ?? ?? ?? ?? 48 85 C0 74 0F 48 39 88\"\noffsets = [0x10EF8, 0x0, 0x190, 0x0, 0x138]\ntype = \"int\"\n\n[attributes.HeroMaxHp]\npattern = \"48 8B 05 ?? ?? ?? ?? 48 85 C0 74 0F 48 39 88\"\noffsets = [0x10EF8, 0x0, 0x190, 0x0, 0x13C]\ntype = \"int\"\n\n[attributes.HeroPosX]\npattern = \"48 8B 05 ?? ?? ?? ?? 48 85 C0 74 0F 48 39 88\"\noffsets = [0x10EF8, 0x0, 0x190, 0x68]\ntype = \"float\"\n\n[attributes.CustomArray]\npattern = \"some pattern\"\noffsets = [0x1000, 0x20]\ntype = \"array\"\nlength = 16  # For array types\nmethod = \"\"   # Optional method\n</code></pre>"},{"location":"api/utils/#attribute-fields","title":"Attribute Fields","text":"Field Type Description <code>name</code> str Attribute identifier <code>pattern</code> str Memory scan pattern (AOB) <code>offsets</code> list[int] Pointer chain offsets <code>type</code> str Data type: \"int\", \"float\", \"array\" <code>length</code> int Length for array types (optional) <code>method</code> str Access method (optional)"},{"location":"api/utils/#pattern-syntax","title":"Pattern Syntax","text":"<p>Memory patterns use IDA/x64dbg style with <code>??</code> for wildcards:</p> <pre><code>48 8B 05 ?? ?? ?? ?? 48 85 C0 74 0F\n</code></pre> <ul> <li>Fixed bytes: <code>48</code>, <code>8B</code>, <code>05</code></li> <li>Wildcards: <code>??</code> (matches any byte)</li> </ul>"},{"location":"api/utils/#return-values","title":"Return Values","text":""},{"location":"api/utils/#parse_config_file","title":"parse_config_file()","text":"<p>Returns: - <code>process_name</code> (str): Name of the target process - <code>process_window_name</code> (str): Window title of the process - <code>attributes</code> (list[dict]): List of memory attributes</p> <p>Each attribute dict contains: <pre><code>{\n    'name': str,\n    'pattern': str,\n    'offsets': list[int],\n    'type': str,\n    'length': int,\n    'method': str,\n}\n</code></pre></p>"},{"location":"api/utils/#error-handling","title":"Error Handling","text":"<pre><code>from eldengym.utils import parse_config_file\n\ntry:\n    process_name, window_name, attributes = parse_config_file(\"config.toml\")\nexcept FileNotFoundError:\n    print(\"Config file not found!\")\nexcept ValueError as e:\n    print(f\"Invalid config format: {e}\")\n</code></pre> <p>Possible errors: - <code>FileNotFoundError</code>: Config file doesn't exist - <code>ValueError</code>: Missing required sections or malformed TOML</p>"},{"location":"api/wrappers/","title":"Wrappers API","text":"<p>Gymnasium wrappers for EldenGym environments.</p>"},{"location":"api/wrappers/#eldengym.wrappers","title":"wrappers","text":""},{"location":"api/wrappers/#eldengym.wrappers.FrameStack","title":"FrameStack","text":"<p>               Bases: <code>ObservationWrapper</code></p> <p>Stack last N frames</p> Source code in <code>eldengym/wrappers.py</code> <pre><code>class FrameStack(gym.ObservationWrapper):\n    \"\"\"Stack last N frames\"\"\"\n\n    def __init__(self, env, num_stack=4):\n        super().__init__(env)\n        self.num_stack = num_stack\n        self.frames = deque(maxlen=num_stack)\n\n        # Update observation space\n        low = np.repeat(self.observation_space.low[..., np.newaxis], num_stack, axis=-1)\n        high = np.repeat(\n            self.observation_space.high[..., np.newaxis], num_stack, axis=-1\n        )\n\n        self.observation_space = gym.spaces.Box(\n            low=low, high=high, dtype=self.observation_space.dtype\n        )\n\n    def observation(self, obs):\n        self.frames.append(obs)\n        # Pad with first frame if not enough frames yet\n        while len(self.frames) &lt; self.num_stack:\n            self.frames.append(obs)\n        return np.concatenate(list(self.frames), axis=-1)\n\n    def reset(self, **kwargs):\n        obs, info = self.env.reset(**kwargs)\n        self.frames.clear()\n        return self.observation(obs), info\n</code></pre>"},{"location":"api/wrappers/#eldengym.wrappers.GrayscaleFrame","title":"GrayscaleFrame","text":"<p>               Bases: <code>ObservationWrapper</code></p> <p>Convert to grayscale</p> Source code in <code>eldengym/wrappers.py</code> <pre><code>class GrayscaleFrame(gym.ObservationWrapper):\n    \"\"\"Convert to grayscale\"\"\"\n\n    def __init__(self, env):\n        super().__init__(env)\n\n        old_shape = self.observation_space.shape\n        self.observation_space = gym.spaces.Box(\n            low=0, high=255, shape=(old_shape[0], old_shape[1], 1), dtype=np.uint8\n        )\n\n    def observation(self, obs):\n        import cv2\n\n        gray = cv2.cvtColor(obs, cv2.COLOR_RGB2GRAY)\n        return np.expand_dims(gray, -1)\n</code></pre>"},{"location":"api/wrappers/#eldengym.wrappers.ResizeFrame","title":"ResizeFrame","text":"<p>               Bases: <code>ObservationWrapper</code></p> <p>Resize frames to target shape</p> Source code in <code>eldengym/wrappers.py</code> <pre><code>class ResizeFrame(gym.ObservationWrapper):\n    \"\"\"Resize frames to target shape\"\"\"\n\n    def __init__(self, env, width=84, height=84):\n        super().__init__(env)\n        self.width = width\n        self.height = height\n\n        self.observation_space = gym.spaces.Box(\n            low=0,\n            high=255,\n            shape=(height, width, self.observation_space.shape[-1]),\n            dtype=np.uint8,\n        )\n\n    def observation(self, obs):\n        import cv2\n\n        return cv2.resize(obs, (self.width, self.height), interpolation=cv2.INTER_AREA)\n</code></pre>"},{"location":"api/wrappers/#available-wrappers","title":"Available Wrappers","text":"<p>(Documentation will be added as wrappers are implemented)</p>"},{"location":"api/wrappers/#creating-custom-wrappers","title":"Creating Custom Wrappers","text":"<p>You can create custom wrappers using the Gymnasium wrapper API:</p> <pre><code>import gymnasium as gym\nfrom gymnasium import Wrapper\n\nclass CustomWrapper(Wrapper):\n    \"\"\"Custom wrapper example.\"\"\"\n\n    def __init__(self, env):\n        super().__init__(env)\n        # Your initialization\n\n    def step(self, action):\n        # Modify action or observation\n        obs, reward, terminated, truncated, info = self.env.step(action)\n\n        # Custom logic here\n        modified_reward = reward * 2.0\n\n        return obs, modified_reward, terminated, truncated, info\n\n    def reset(self, **kwargs):\n        obs, info = self.env.reset(**kwargs)\n        # Custom logic\n        return obs, info\n\n# Use the wrapper\nenv = gym.make(\"EldenGym-v0\")\nenv = CustomWrapper(env)\n</code></pre>"},{"location":"api/wrappers/#common-wrapper-patterns","title":"Common Wrapper Patterns","text":""},{"location":"api/wrappers/#frame-stacking","title":"Frame Stacking","text":"<pre><code>from gymnasium.wrappers import FrameStack\n\nenv = gym.make(\"EldenGym-v0\")\nenv = FrameStack(env, num_stack=4)  # Stack last 4 frames\n</code></pre>"},{"location":"api/wrappers/#action-repeat","title":"Action Repeat","text":"<pre><code>from gymnasium.wrappers import ActionRepeatWrapper\n\nenv = gym.make(\"EldenGym-v0\", frame_skip=1)  # Disable built-in skip\nenv = ActionRepeatWrapper(env, repeat=4)  # Repeat each action 4 times\n</code></pre>"},{"location":"api/wrappers/#reward-scaling","title":"Reward Scaling","text":"<pre><code>from gymnasium.wrappers import TransformReward\n\nenv = gym.make(\"EldenGym-v0\")\nenv = TransformReward(env, lambda r: r / 100.0)  # Scale rewards\n</code></pre>"},{"location":"api/wrappers/#frame-resize","title":"Frame Resize","text":"<pre><code>from gymnasium.wrappers import ResizeObservation\n\nenv = gym.make(\"EldenGym-v0\")\nenv = ResizeObservation(env, shape=(84, 84))  # Resize to 84x84\n</code></pre>"},{"location":"api/wrappers/#gray-scale","title":"Gray Scale","text":"<pre><code>from gymnasium.wrappers import GrayScaleObservation\n\nenv = gym.make(\"EldenGym-v0\")\nenv = GrayScaleObservation(env)  # Convert to grayscale\n</code></pre>"},{"location":"api/wrappers/#combining-wrappers","title":"Combining Wrappers","text":"<pre><code>import gymnasium as gym\nfrom gymnasium.wrappers import (\n    ResizeObservation,\n    GrayScaleObservation,\n    FrameStack,\n)\n\n# Create base environment\nenv = gym.make(\"EldenGym-v0\", scenario_name=\"margit\")\n\n# Apply wrappers in order\nenv = GrayScaleObservation(env)      # RGB -&gt; Gray\nenv = ResizeObservation(env, (84, 84))  # Resize\nenv = FrameStack(env, num_stack=4)   # Stack frames\n\n# Now ready for training\nobs, info = env.reset()\nprint(obs.shape)  # (4, 84, 84) - 4 stacked grayscale frames\n</code></pre>"},{"location":"development/architecture/","title":"Architecture","text":"<p>Understanding EldenGym's architecture and design decisions.</p>"},{"location":"development/architecture/#system-overview","title":"System Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            RL Training Framework            \u2502\n\u2502     (stable-baselines3, Ray RLlib, etc)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502 Gymnasium API\n                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              EldenGym (Python)              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  EldenGymEnv (env.py)               \u2502   \u2502\n\u2502  \u2502  - Gymnasium interface              \u2502   \u2502\n\u2502  \u2502  - Action/observation spaces        \u2502   \u2502\n\u2502  \u2502  - Reward computation               \u2502   \u2502\n\u2502  \u2502  - Episode management               \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                 \u2502                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  EldenClient (elden_client.py)      \u2502   \u2502\n\u2502  \u2502  - Game-specific methods            \u2502   \u2502\n\u2502  \u2502  - HP, position, teleport, etc      \u2502   \u2502\n\u2502  \u2502  - Config initialization            \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                 \u2502                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  SiphonClient (siphon_client.py)    \u2502   \u2502\n\u2502  \u2502  - Pure gRPC wrapper                \u2502   \u2502\n\u2502  \u2502  - Memory operations                \u2502   \u2502\n\u2502  \u2502  - Input injection                  \u2502   \u2502\n\u2502  \u2502  - Screen capture                   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502 gRPC (Protocol Buffers)\n                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Siphon Server (C++)               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Memory Subsystem                   \u2502   \u2502\n\u2502  \u2502  - Pattern scanning                 \u2502   \u2502\n\u2502  \u2502  - Pointer dereferencing            \u2502   \u2502\n\u2502  \u2502  - Read/write memory                \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Input Subsystem                    \u2502   \u2502\n\u2502  \u2502  - Keyboard injection               \u2502   \u2502\n\u2502  \u2502  - Mouse injection                  \u2502   \u2502\n\u2502  \u2502  - Window focus management          \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Capture Subsystem                  \u2502   \u2502\n\u2502  \u2502  - Screen capture (DXGI)            \u2502   \u2502\n\u2502  \u2502  - Frame encoding                   \u2502   \u2502\n\u2502  \u2502  - Buffer management                \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502 Windows API / DirectX\n                  \u25bc\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502 Elden Ring  \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#component-details","title":"Component Details","text":""},{"location":"development/architecture/#1-eldengymenv-envpy","title":"1. EldenGymEnv (env.py)","text":"<p>Purpose: Gymnasium environment wrapper</p> <p>Responsibilities: - Implement Gymnasium API (<code>reset()</code>, <code>step()</code>, <code>render()</code>, <code>close()</code>) - Define action and observation spaces - Manage episode lifecycle - Compute rewards - Handle game state transitions</p> <p>Key Methods: <pre><code>reset() -&gt; (observation, info)\nstep(action) -&gt; (observation, reward, terminated, truncated, info)\nrender() -&gt; frame\n</code></pre></p>"},{"location":"development/architecture/#2-eldenclient-elden_clientpy","title":"2. EldenClient (elden_client.py)","text":"<p>Purpose: Game-specific high-level interface</p> <p>Responsibilities: - Game-specific operations (HP, position, etc.) - Boss fight scenario management - Config file parsing and initialization - Convenience methods for common tasks</p> <p>Key Features: - Properties for game state (<code>player_hp</code>, <code>target_hp</code>, etc.) - Helper methods (<code>teleport()</code>, <code>set_game_speed()</code>) - Scenario management (<code>start_scenario()</code>) - Auto-resolving config paths</p>"},{"location":"development/architecture/#3-siphonclient-siphon_clientpy","title":"3. SiphonClient (siphon_client.py)","text":"<p>Purpose: Pure gRPC client wrapper</p> <p>Responsibilities: - Low-level communication with Siphon server - Direct memory operations - Input injection - Frame capture - System commands</p> <p>Design: Completely game-agnostic, reusable for other games</p>"},{"location":"development/architecture/#4-siphon-server-c","title":"4. Siphon Server (C++)","text":"<p>Purpose: Low-level game interaction</p> <p>Subsystems:</p>"},{"location":"development/architecture/#memory-subsystem","title":"Memory Subsystem","text":"<ul> <li>Pattern Scanning: Find memory locations via AOB patterns</li> <li>Pointer Chains: Follow multi-level pointers</li> <li>Read/Write: Direct memory access</li> </ul>"},{"location":"development/architecture/#input-subsystem","title":"Input Subsystem","text":"<ul> <li>Keyboard: Virtual key injection</li> <li>Mouse: Movement and clicks</li> <li>Focus: Window focus management</li> </ul>"},{"location":"development/architecture/#capture-subsystem","title":"Capture Subsystem","text":"<ul> <li>DXGI: GPU-accelerated screen capture</li> <li>Encoding: Frame compression</li> <li>Streaming: Efficient frame delivery</li> </ul>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":""},{"location":"development/architecture/#initialization-flow","title":"Initialization Flow","text":"<pre><code>1. Create EldenGymEnv\n   \u2193\n2. Create EldenClient\n   \u2193\n3. EldenClient.load_config_from_file()\n   \u2193\n4. Parse TOML config \u2192 extract patterns\n   \u2193\n5. Send config to Siphon server\n   \u2193\n6. Initialize memory subsystem\n   \u251c\u2500 Find process by name\n   \u251c\u2500 Scan for patterns\n   \u2514\u2500 Build pointer chains\n   \u2193\n7. Initialize input subsystem\n   \u2514\u2500 Attach to game window\n   \u2193\n8. Initialize capture subsystem\n   \u2514\u2500 Set up DXGI capture\n   \u2193\n9. Ready for training!\n</code></pre>"},{"location":"development/architecture/#training-step-flow","title":"Training Step Flow","text":"<pre><code>1. Agent selects action\n   \u2193\n2. EldenGymEnv.step(action)\n   \u2193\n3. Convert action to inputs\n   \u2193\n4. EldenClient.send_key(keys, time)\n   \u2193\n5. SiphonClient (gRPC call)\n   \u2193\n6. Siphon Server \u2192 inject input\n   \u2193\n7. Game processes input (frame_skip frames)\n   \u2193\n8. Read game state\n   \u251c\u2500 EldenClient.player_hp\n   \u251c\u2500 EldenClient.target_hp\n   \u2514\u2500 EldenClient.get_frame()\n   \u2193\n9. Compute reward\n   \u2193\n10. Return (obs, reward, terminated, truncated, info)\n</code></pre>"},{"location":"development/architecture/#design-decisions","title":"Design Decisions","text":""},{"location":"development/architecture/#why-grpc","title":"Why gRPC?","text":"<p>Pros: - High performance (Protocol Buffers) - Language agnostic (C++ server, Python client) - Streaming support for frames - Built-in error handling</p> <p>Alternatives considered: - REST API (too slow for real-time) - Shared memory (platform-specific) - Sockets (manual protocol design)</p>"},{"location":"development/architecture/#why-c-server","title":"Why C++ Server?","text":"<p>Pros: - Low-level Windows API access - Direct memory manipulation - High performance capture (DXGI) - Minimal overhead</p> <p>Alternatives: - Pure Python (too slow, no low-level access) - Rust (considered, but C++ has more Windows examples)</p>"},{"location":"development/architecture/#why-toml-config","title":"Why TOML Config?","text":"<p>Pros: - Human-readable - Easy to edit - Built-in Python support (tomllib/tomli) - Structured data</p> <p>Alternatives: - JSON (less readable) - YAML (complex, security issues) - Python files (not data-focused)</p>"},{"location":"development/architecture/#why-gymnasium","title":"Why Gymnasium?","text":"<p>Pros: - Standard RL interface - Wide ecosystem support - Well-documented - Active development</p> <p>Alternatives: - Custom API (wheel reinvention) - OpenAI Gym (deprecated)</p>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/architecture/#frame-capture","title":"Frame Capture","text":"<p>Challenge: Capturing frames is expensive</p> <p>Solutions: - DXGI GPU capture (faster than GDI) - Frame skipping (default: 4 frames) - Optional frame capture (dict observation mode) - Efficient frame encoding</p>"},{"location":"development/architecture/#memory-reading","title":"Memory Reading","text":"<p>Challenge: Frequent memory reads can be slow</p> <p>Solutions: - Batch reads when possible - Pointer caching - Efficient gRPC serialization</p>"},{"location":"development/architecture/#input-injection","title":"Input Injection","text":"<p>Challenge: Input timing is critical</p> <p>Solutions: - Direct input injection (bypasses window focus) - Precise timing control (milliseconds) - Frame-synchronized actions</p>"},{"location":"development/architecture/#extensibility","title":"Extensibility","text":""},{"location":"development/architecture/#adding-new-games","title":"Adding New Games","text":"<ol> <li>Create game-specific client (inherit from <code>SiphonClient</code>)</li> <li>Create TOML config with memory patterns</li> <li>Define scenarios</li> <li>Create Gymnasium environment</li> </ol>"},{"location":"development/architecture/#adding-new-scenarios","title":"Adding New Scenarios","text":"<pre><code># In elden_client.py\nself.scenarios = {\n    \"margit\": {\n        \"boss_name\": \"Margit\",\n        \"fog_wall_location\": (x, y, z),\n    },\n    \"godrick\": {  # New scenario\n        \"boss_name\": \"Godrick\",\n        \"fog_wall_location\": (x, y, z),\n    }\n}\n</code></pre>"},{"location":"development/architecture/#custom-reward-functions","title":"Custom Reward Functions","text":"<pre><code>def custom_reward(obs, info, terminated, truncated):\n    # Your logic\n    return reward\n\nenv = gym.make(\"EldenGym-v0\", reward_function=custom_reward)\n</code></pre>"},{"location":"development/architecture/#custom-wrappers","title":"Custom Wrappers","text":"<p>Use Gymnasium wrappers for preprocessing, augmentation, etc.</p>"},{"location":"development/architecture/#security-considerations","title":"Security Considerations","text":"<p>\u26a0\ufe0f Warning: This tool manipulates game memory and injects inputs.</p> <p>Safety measures: - Local-only by default (localhost:50051) - No remote code execution - Read-only mode possible - Sandboxed game instance recommended</p> <p>Use responsibly: - Only for single-player - Respect game ToS - Educational/research purposes</p>"},{"location":"development/architecture/#future-improvements","title":"Future Improvements","text":"<ul> <li>[ ] Multi-agent support</li> <li>[ ] Replay buffer integration</li> <li>[ ] Better state serialization</li> <li>[ ] Cloud training support</li> <li>[ ] Web dashboard for monitoring</li> <li>[ ] More boss scenarios</li> <li>[ ] PvP scenarios</li> <li>[ ] Speedrun scenarios</li> </ul>"},{"location":"development/architecture/#resources","title":"Resources","text":"<ul> <li>Gymnasium Docs</li> <li>gRPC Python</li> <li>Memory Scanning Basics</li> </ul>"},{"location":"development/contributing/","title":"Contributing to EldenGym","text":"<p>Thank you for your interest in contributing to EldenGym!</p>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#1-fork-and-clone","title":"1. Fork and Clone","text":"<pre><code># Fork on GitHub, then clone\ngit clone https://github.com/dhmnr/eldengym.git\ncd eldengym\n</code></pre>"},{"location":"development/contributing/#2-install-development-dependencies","title":"2. Install Development Dependencies","text":"<pre><code># Install with dev dependencies using uv\nuv sync --group dev --group docs\n\n# Or with pip\npip install -e \".[dev,docs]\"\n</code></pre>"},{"location":"development/contributing/#3-set-up-pre-commit-hooks","title":"3. Set Up Pre-commit Hooks","text":"<pre><code>uv run pre-commit install\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We use <code>ruff</code> for linting and formatting:</p> <pre><code># Format code\nuv run ruff format .\n\n# Check linting\nuv run ruff check .\n\n# Fix linting issues\nuv run ruff check --fix .\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":"<pre><code># Run tests (when implemented)\nuv run pytest\n\n# Run specific test\nuv run pytest tests/test_env.py\n\n# With coverage\nuv run pytest --cov=eldengym\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>Build and serve documentation locally:</p> <pre><code># Install docs dependencies\nuv sync --group docs\n\n# Serve docs locally\nuv run mkdocs serve\n\n# Build docs\nuv run mkdocs build\n</code></pre> <p>Visit <code>http://localhost:8000</code> to see the documentation.</p>"},{"location":"development/contributing/#making-changes","title":"Making Changes","text":""},{"location":"development/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout -b feature/my-feature\n# or\ngit checkout -b fix/my-bugfix\n</code></pre>"},{"location":"development/contributing/#2-make-your-changes","title":"2. Make Your Changes","text":"<ul> <li>Write clear, documented code</li> <li>Add docstrings to new functions/classes</li> <li>Update documentation if needed</li> <li>Add tests for new features</li> </ul>"},{"location":"development/contributing/#3-commit","title":"3. Commit","text":"<p>We use semantic commit messages:</p> <pre><code># Feature\ngit commit -m \"feat(env): add new observation type\"\n\n# Bug fix\ngit commit -m \"fix(client): resolve connection timeout\"\n\n# Documentation\ngit commit -m \"docs: update installation guide\"\n\n# Breaking change\ngit commit -m \"feat(api)!: redesign action space\n\nBREAKING CHANGE: Action space now uses continuous values\"\n</code></pre>"},{"location":"development/contributing/#4-push-and-create-pr","title":"4. Push and Create PR","text":"<pre><code>git push origin feature/my-feature\n</code></pre> <p>Then create a Pull Request on GitHub.</p>"},{"location":"development/contributing/#contribution-areas","title":"Contribution Areas","text":""},{"location":"development/contributing/#high-priority","title":"High Priority","text":"<ul> <li>\ud83e\uddea Tests - Add unit and integration tests</li> <li>\ud83d\udcda Documentation - Improve guides and examples</li> <li>\ud83c\udfae Scenarios - Add new boss fight scenarios</li> <li>\ud83c\udf81 Wrappers - Create useful environment wrappers</li> </ul>"},{"location":"development/contributing/#features","title":"Features","text":"<ul> <li>Reward Functions - New reward function implementations</li> <li>Observation Processing - Better frame preprocessing</li> <li>Action Spaces - Alternative action representations</li> <li>Memory Patterns - Support for different game versions</li> </ul>"},{"location":"development/contributing/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Performance improvements</li> <li>Memory leaks</li> <li>Connection issues</li> <li>Game state synchronization</li> </ul>"},{"location":"development/contributing/#code-guidelines","title":"Code Guidelines","text":""},{"location":"development/contributing/#python-style","title":"Python Style","text":"<ul> <li>Follow PEP 8</li> <li>Use type hints</li> <li>Maximum line length: 88 characters</li> <li>Docstrings: Google style</li> </ul> <pre><code>def my_function(arg1: int, arg2: str) -&gt; bool:\n    \"\"\"Short description.\n\n    Longer description if needed.\n\n    Args:\n        arg1: Description of arg1\n        arg2: Description of arg2\n\n    Returns:\n        Description of return value\n\n    Raises:\n        ValueError: When something is wrong\n    \"\"\"\n    return True\n</code></pre>"},{"location":"development/contributing/#docstring-examples","title":"Docstring Examples","text":"<pre><code>class MyClass:\n    \"\"\"Brief description.\n\n    Detailed description of the class purpose and usage.\n\n    Attributes:\n        attr1: Description\n        attr2: Description\n\n    Example:\n        &gt;&gt;&gt; obj = MyClass()\n        &gt;&gt;&gt; obj.method()\n        'result'\n    \"\"\"\n\n    def method(self) -&gt; str:\n        \"\"\"Method description.\"\"\"\n        return \"result\"\n</code></pre>"},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<pre><code>eldengym/\n  \u251c\u2500\u2500 eldengym/\n  \u2502   \u251c\u2500\u2500 __init__.py\n  \u2502   \u251c\u2500\u2500 env.py          # Main environment\n  \u2502   \u251c\u2500\u2500 envs.py         # Environment registration\n  \u2502   \u251c\u2500\u2500 rewards.py      # Reward functions\n  \u2502   \u251c\u2500\u2500 wrappers.py     # Gymnasium wrappers\n  \u2502   \u251c\u2500\u2500 utils.py        # Utility functions\n  \u2502   \u251c\u2500\u2500 registry.py     # Scenario registry\n  \u2502   \u251c\u2500\u2500 client/\n  \u2502   \u2502   \u251c\u2500\u2500 siphon_client.py   # gRPC client\n  \u2502   \u2502   \u2514\u2500\u2500 elden_client.py    # Game-specific client\n  \u2502   \u2514\u2500\u2500 files/\n  \u2502       \u2514\u2500\u2500 configs/    # Game configurations\n  \u251c\u2500\u2500 examples/           # Example notebooks\n  \u251c\u2500\u2500 docs/              # Documentation\n  \u251c\u2500\u2500 tests/             # Test suite\n  \u2514\u2500\u2500 pyproject.toml     # Project config\n</code></pre>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Open an issue for bugs or features</li> <li>Discussions: Use GitHub Discussions for questions</li> <li>Discord: (link if available)</li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful and constructive. We're all here to learn and build something cool!</p>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Learn how to configure EldenGym for your use case.</p>"},{"location":"getting-started/configuration/#toml-configuration-files","title":"TOML Configuration Files","text":"<p>EldenGym uses TOML files to define game memory patterns and process information.</p>"},{"location":"getting-started/configuration/#default-configuration","title":"Default Configuration","text":"<p>The default config is located at: <pre><code>eldengym/files/configs/ER_1_16_1.toml\n</code></pre></p>"},{"location":"getting-started/configuration/#config-structure","title":"Config Structure","text":"<pre><code>[process_info]\nname = \"eldenring.exe\"\nwindow_name = \"ELDEN RING\"\n\n[attributes.AttributeName]\npattern = \"48 8B 05 ?? ?? ?? ??\"\noffsets = [0x10EF8, 0x0, 0x190, 0x138]\ntype = \"int\"  # or \"float\", \"array\"\nlength = 4    # For array types\nmethod = \"\"   # Optional\n</code></pre>"},{"location":"getting-started/configuration/#memory-attributes","title":"Memory Attributes","text":""},{"location":"getting-started/configuration/#common-attributes","title":"Common Attributes","text":"<p>The default config includes:</p> <p>Player Stats: - <code>HeroHp</code> / <code>HeroMaxHp</code> - Health - <code>HeroFp</code> / <code>HeroMaxFp</code> - FP (mana) - <code>HeroSp</code> / <code>HeroMaxSp</code> - Stamina</p> <p>Player Position: - <code>HeroLocalPosX/Y/Z</code> - Local coordinates - <code>HeroGlobalPosX/Y/Z</code> - Global coordinates</p> <p>Player Animation: - <code>HeroAnimId</code> - Current animation ID - <code>HeroAnimLength</code> - Animation length - <code>HeroAnimSpeed</code> - Animation speed</p> <p>Target/Boss: - <code>NpcHp</code> / <code>NpcMaxHp</code> - Target health - <code>NpcLocalPosX/Y/Z</code> - Target position - <code>NpcGlobalPosX/Y/Z</code> - Target global position - <code>NpcAnimId</code> - Target animation</p>"},{"location":"getting-started/configuration/#pattern-syntax","title":"Pattern Syntax","text":"<p>Memory patterns use AOB (Array of Bytes) format:</p> <pre><code>48 8B 05 ?? ?? ?? ?? 48 85 C0\n</code></pre> <ul> <li>Fixed bytes: <code>48</code>, <code>8B</code>, <code>05</code> (must match exactly)</li> <li>Wildcards: <code>??</code> (matches any byte)</li> </ul>"},{"location":"getting-started/configuration/#offset-chains","title":"Offset Chains","text":"<p>Offsets define a pointer chain to follow:</p> <pre><code>offsets = [0x10EF8, 0x0, 0x190, 0x138]\n</code></pre> <p>This means: 1. Start at pattern match 2. Add <code>0x10EF8</code>, read pointer 3. Add <code>0x0</code>, read pointer 4. Add <code>0x190</code>, read pointer 5. Add <code>0x138</code> = final address</p>"},{"location":"getting-started/configuration/#creating-custom-configs","title":"Creating Custom Configs","text":""},{"location":"getting-started/configuration/#1-find-memory-patterns","title":"1. Find Memory Patterns","text":"<p>Use tools like Cheat Engine or x64dbg to find memory patterns:</p> <pre><code>1. Search for a value (e.g., player HP)\n2. Change the value in-game\n3. Refine search\n4. Find the base pointer\n5. Generate AOB pattern\n</code></pre>"},{"location":"getting-started/configuration/#2-create-config-file","title":"2. Create Config File","text":"<pre><code>[process_info]\nname = \"mygame.exe\"\nwindow_name = \"My Game Window\"\n\n[attributes.PlayerHealth]\npattern = \"48 8B 05 ?? ?? ?? ?? 48 85 C0\"\noffsets = [0x1000, 0x20, 0x10]\ntype = \"int\"\n\n[attributes.PlayerMana]\npattern = \"48 8B 05 ?? ?? ?? ?? 48 85 C0\"\noffsets = [0x1000, 0x20, 0x14]\ntype = \"int\"\n</code></pre>"},{"location":"getting-started/configuration/#3-use-custom-config","title":"3. Use Custom Config","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n    config_filepath=\"/path/to/custom_config.toml\"\n)\n</code></pre>"},{"location":"getting-started/configuration/#environment-options","title":"Environment Options","text":""},{"location":"getting-started/configuration/#scenario-configuration","title":"Scenario Configuration","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n    scenario_name=\"margit\",  # Boss scenario\n)\n</code></pre>"},{"location":"getting-started/configuration/#action-space-configuration","title":"Action Space Configuration","text":"<pre><code># Discrete actions (default)\nenv = gym.make(\"EldenGym-v0\", action_mode=\"discrete\")\n\n# Multi-binary (simultaneous actions)\nenv = gym.make(\"EldenGym-v0\", action_mode=\"multi_binary\")\n\n# Continuous actions\nenv = gym.make(\"EldenGym-v0\", action_mode=\"continuous\")\n</code></pre>"},{"location":"getting-started/configuration/#observation-configuration","title":"Observation Configuration","text":"<pre><code># RGB frames only (default)\nenv = gym.make(\"EldenGym-v0\", observation_mode=\"rgb\")\n\n# Dictionary with game state\nenv = gym.make(\"EldenGym-v0\", observation_mode=\"dict\")\n</code></pre>"},{"location":"getting-started/configuration/#game-speed-configuration","title":"Game Speed Configuration","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n    frame_skip=4,        # Skip 4 frames (like Atari)\n    game_speed=1.0,      # Normal speed\n    freeze_game=False,   # Don't freeze between steps\n    game_fps=60,         # Target 60 FPS\n)\n</code></pre>"},{"location":"getting-started/configuration/#episode-configuration","title":"Episode Configuration","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n    max_step=1000,  # Max 1000 steps per episode\n)\n</code></pre>"},{"location":"getting-started/configuration/#custom-reward-functions","title":"Custom Reward Functions","text":"<pre><code>def my_reward_function(obs, info, terminated, truncated):\n    \"\"\"Custom reward function.\n\n    Args:\n        obs: Current observation\n        info: Info dictionary\n        terminated: Whether episode terminated\n        truncated: Whether episode truncated\n\n    Returns:\n        float: Reward value\n    \"\"\"\n    reward = 0.0\n\n    # Reward for boss damage\n    if 'target_hp_delta' in info:\n        reward += info['target_hp_delta'] * 10.0\n\n    # Penalty for player damage\n    if 'player_hp_delta' in info:\n        reward += info['player_hp_delta'] * 5.0\n\n    # Bonus for winning\n    if terminated and info.get('target_hp', 0) &lt;= 0:\n        reward += 1000.0\n\n    return reward\n\n# Use custom reward\nenv = gym.make(\n    \"EldenGym-v0\",\n    reward_function=my_reward_function\n)\n</code></pre>"},{"location":"getting-started/configuration/#server-configuration","title":"Server Configuration","text":""},{"location":"getting-started/configuration/#connection-settings","title":"Connection Settings","text":"<pre><code>from eldengym.client.elden_client import EldenClient\n\nclient = EldenClient(\n    host=\"localhost:50051\",                  # Server address\n    max_receive_message_length=100*1024*1024,  # 100MB\n    max_send_message_length=100*1024*1024,     # 100MB\n)\n</code></pre>"},{"location":"getting-started/configuration/#remote-server","title":"Remote Server","text":"<pre><code># Connect to remote server\nclient = EldenClient(host=\"192.168.1.100:50051\")\nenv = gym.make(\"EldenGym-v0\", host=\"192.168.1.100:50051\")\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#config-not-found","title":"Config Not Found","text":"<p>EldenGym auto-resolves config paths:</p> <pre><code># These all work:\nconfig=\"ER_1_16_1.toml\"  # Searches in eldengym/files/configs/\nconfig=\"files/configs/ER_1_16_1.toml\"  # Relative to package\nconfig=\"/absolute/path/to/config.toml\"  # Absolute path\n</code></pre>"},{"location":"getting-started/configuration/#memory-pattern-outdated","title":"Memory Pattern Outdated","text":"<p>If the game updates, memory patterns may change:</p> <ol> <li>Update the config file with new patterns</li> <li>Use pattern + offset combinations that are version-agnostic</li> <li>Check community for updated configs</li> </ol>"},{"location":"getting-started/configuration/#performance-issues","title":"Performance Issues","text":"<pre><code># Reduce frame capture cost\nenv = gym.make(\n    \"EldenGym-v0\",\n    frame_skip=8,        # Skip more frames\n    observation_mode=\"dict\",  # Don't capture frames if not needed\n)\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Tutorial</li> <li>API Reference</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Elden Ring (Steam version)</li> <li>Windows (required for game interaction)</li> <li>uv (recommended) or pip</li> </ul>"},{"location":"getting-started/installation/#install-eldengym","title":"Install EldenGym","text":""},{"location":"getting-started/installation/#using-uv-recommended","title":"Using uv (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/dhmnr/eldengym.git\ncd eldengym\n\n# Install with uv\nuv sync\n</code></pre>"},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code># Clone the repository\ngit clone https://github.com/dhmnr/eldengym.git\ncd eldengym\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#install-siphon-server","title":"Install Siphon Server","text":"<p>EldenGym requires the Siphon gRPC server to communicate with Elden Ring.</p> <ol> <li>Download the latest Siphon server release from [releases page]</li> <li>Extract to a convenient location</li> <li>Run <code>siphon_server.exe</code></li> </ol> <p>The server should start on <code>localhost:50051</code> by default.</p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>import gymnasium as gym\nimport eldengym\n\nprint(eldengym.__version__)  # Should print: 1.0.0\n\n# Test environment creation\nenv = gym.make(\"EldenGym-v0\")\nprint(\"\u2713 EldenGym installed successfully!\")\n</code></pre>"},{"location":"getting-started/installation/#configuration-files","title":"Configuration Files","text":"<p>EldenGym includes pre-configured memory patterns for Elden Ring:</p> <pre><code>eldengym/\n  files/\n    configs/\n      ER_1_16_1.toml  # Elden Ring v1.16.1\n</code></pre> <p>If you have a different game version, you may need to update memory patterns.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#failed-to-connect-to-server","title":"\"Failed to connect to server\"","text":"<p>Make sure the Siphon server is running: <pre><code># Check if server is running\nnetstat -an | findstr :50051\n</code></pre></p>"},{"location":"getting-started/installation/#config-file-not-found","title":"\"Config file not found\"","text":"<p>The config path auto-resolves. Use just the filename: <pre><code>env = gym.make(\"EldenGym-v0\", config_filepath=\"ER_1_16_1.toml\")\n</code></pre></p>"},{"location":"getting-started/installation/#memory-initialization-failed","title":"\"Memory initialization failed\"","text":"<ol> <li>Ensure Elden Ring is running</li> <li>Check game version matches config file</li> <li>Run as Administrator if needed</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Continue to the Quick Start Guide to train your first agent!</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will walk you through creating your first RL agent with EldenGym.</p>"},{"location":"getting-started/quickstart/#basic-setup","title":"Basic Setup","text":"<pre><code>import gymnasium as gym\nimport eldengym\n\n# Create environment\nenv = gym.make(\"EldenGym-v0\", scenario_name=\"margit\")\n</code></pre>"},{"location":"getting-started/quickstart/#simple-random-agent","title":"Simple Random Agent","text":"<pre><code># Reset environment\nobservation, info = env.reset()\n\n# Run for 100 steps\nfor step in range(100):\n    # Sample random action\n    action = env.action_space.sample()\n\n    # Take action\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    print(f\"Step {step}: Reward={reward:.2f}, HP={info.get('player_hp', 0)}\")\n\n    # Reset if episode ends\n    if terminated or truncated:\n        observation, info = env.reset()\n        print(\"Episode ended - resetting\")\n\nenv.close()\n</code></pre>"},{"location":"getting-started/quickstart/#with-stable-baselines3","title":"With Stable-Baselines3","text":"<pre><code>import gymnasium as gym\nfrom stable_baselines3 import PPO\nfrom stable_baselines3.common.vec_env import DummyVecEnv\nimport eldengym\n\n# Create vectorized environment\nenv = DummyVecEnv([lambda: gym.make(\"EldenGym-v0\", scenario_name=\"margit\")])\n\n# Initialize PPO agent\nmodel = PPO(\n    \"CnnPolicy\",  # Use CNN for image observations\n    env,\n    verbose=1,\n    learning_rate=3e-4,\n    n_steps=2048,\n)\n\n# Train the agent\nmodel.learn(total_timesteps=100_000)\n\n# Save the model\nmodel.save(\"margit_ppo\")\n\n# Test the trained agent\nobs = env.reset()\nfor i in range(1000):\n    action, _states = model.predict(obs, deterministic=True)\n    obs, reward, done, info = env.step(action)\n    if done:\n        obs = env.reset()\n\nenv.close()\n</code></pre>"},{"location":"getting-started/quickstart/#custom-reward-function","title":"Custom Reward Function","text":"<pre><code>def custom_reward(obs, info, terminated, truncated):\n    \"\"\"Reward function that encourages aggressive play.\"\"\"\n    reward = 0.0\n\n    # Reward for damaging the boss\n    if 'target_hp_delta' in info:\n        reward += info['target_hp_delta'] * 10.0\n\n    # Penalty for taking damage\n    if 'player_hp_delta' in info:\n        reward += info['player_hp_delta'] * 5.0\n\n    # Big bonus for winning\n    if terminated and info.get('target_hp', 0) &lt;= 0:\n        reward += 1000.0\n\n    # Penalty for dying\n    if terminated and info.get('player_hp', 0) &lt;= 0:\n        reward -= 500.0\n\n    return reward\n\n# Use custom reward\nenv = gym.make(\n    \"EldenGym-v0\",\n    scenario_name=\"margit\",\n    reward_function=custom_reward\n)\n</code></pre>"},{"location":"getting-started/quickstart/#different-action-spaces","title":"Different Action Spaces","text":""},{"location":"getting-started/quickstart/#discrete-actions-default","title":"Discrete Actions (Default)","text":"<pre><code>env = gym.make(\"EldenGym-v0\", action_mode=\"discrete\")\n# 9 actions: no-op, forward, backward, left, right, attack, dodge, lock-on, use-item\n</code></pre>"},{"location":"getting-started/quickstart/#multi-binary-actions","title":"Multi-Binary Actions","text":"<pre><code>env = gym.make(\"EldenGym-v0\", action_mode=\"multi_binary\")\n# Binary vector: [forward, backward, left, right, attack, dodge, lock-on, use-item]\n# Can combine actions: [1, 0, 1, 0, 1, 0, 0, 0] = forward + left + attack\n</code></pre>"},{"location":"getting-started/quickstart/#continuous-actions","title":"Continuous Actions","text":"<pre><code>env = gym.make(\"EldenGym-v0\", action_mode=\"continuous\")\n# Continuous control (advanced use)\n</code></pre>"},{"location":"getting-started/quickstart/#environment-options","title":"Environment Options","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n    scenario_name=\"margit\",           # Boss scenario\n    action_mode=\"discrete\",           # Action space type\n    frame_skip=4,                     # Skip frames (like Atari)\n    game_speed=1.0,                   # Game speed multiplier\n    max_step=1000,                    # Max steps per episode\n    config_filepath=\"ER_1_16_1.toml\", # Game config\n)\n</code></pre>"},{"location":"getting-started/quickstart/#monitoring-training","title":"Monitoring Training","text":"<pre><code>from stable_baselines3.common.callbacks import CheckpointCallback, EvalCallback\n\n# Save model checkpoints\ncheckpoint_callback = CheckpointCallback(\n    save_freq=10000,\n    save_path=\"./checkpoints/\",\n    name_prefix=\"margit_model\"\n)\n\n# Evaluate periodically\neval_env = gym.make(\"EldenGym-v0\", scenario_name=\"margit\")\neval_callback = EvalCallback(\n    eval_env,\n    best_model_save_path=\"./best_model/\",\n    log_path=\"./logs/\",\n    eval_freq=5000,\n)\n\n# Train with callbacks\nmodel.learn(\n    total_timesteps=500_000,\n    callback=[checkpoint_callback, eval_callback]\n)\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Action Spaces</li> <li>Learn about Observations</li> <li>See Examples</li> </ul>"},{"location":"user-guide/action-spaces/","title":"Action Spaces","text":"<p>EldenGym supports three action space types: discrete, multi-binary, and continuous.</p>"},{"location":"user-guide/action-spaces/#discrete-actions-default","title":"Discrete Actions (Default)","text":"<p>Type: <code>gymnasium.spaces.Discrete(9)</code></p> <p>The simplest action space with 9 discrete actions:</p> Action Description 0 No-op (do nothing) 1 Move forward 2 Move backward 3 Strafe left 4 Strafe right 5 Attack (R1) 6 Dodge roll 7 Toggle lock-on 8 Use item"},{"location":"user-guide/action-spaces/#usage","title":"Usage","text":"<pre><code>env = gym.make(\"EldenGym-v0\", action_mode=\"discrete\")\n\n# Sample random action\naction = env.action_space.sample()  # Returns int in [0, 8]\n\n# Take specific action\nobs, reward, terminated, truncated, info = env.step(5)  # Attack\n</code></pre>"},{"location":"user-guide/action-spaces/#best-for","title":"Best For","text":"<ul> <li>Simple agents</li> <li>Q-learning, DQN</li> <li>Quick prototyping</li> </ul>"},{"location":"user-guide/action-spaces/#multi-binary-actions","title":"Multi-Binary Actions","text":"<p>Type: <code>gymnasium.spaces.MultiBinary(8)</code></p> <p>Allow simultaneous actions with binary vector:</p> Index Action Description 0 Forward Move forward 1 Backward Move backward 2 Left Strafe left 3 Right Strafe right 4 Attack Attack (R1) 5 Dodge Dodge roll 6 Lock-on Toggle lock-on 7 Use item Use item"},{"location":"user-guide/action-spaces/#usage_1","title":"Usage","text":"<pre><code>env = gym.make(\"EldenGym-v0\", action_mode=\"multi_binary\")\n\n# Move forward and attack\naction = np.array([1, 0, 0, 0, 1, 0, 0, 0])\nobs, reward, terminated, truncated, info = env.step(action)\n\n# Dodge while moving left\naction = np.array([0, 0, 1, 0, 0, 1, 0, 0])\nobs, reward, terminated, truncated, info = env.step(action)\n</code></pre>"},{"location":"user-guide/action-spaces/#best-for_1","title":"Best For","text":"<ul> <li>More complex behaviors</li> <li>Combining movements with actions</li> <li>PPO, A2C agents</li> </ul>"},{"location":"user-guide/action-spaces/#continuous-actions","title":"Continuous Actions","text":"<p>Type: <code>gymnasium.spaces.Box(low=-1, high=1, shape=(8,))</code></p> <p>Continuous control for each action:</p> <pre><code>env = gym.make(\"EldenGym-v0\", action_mode=\"continuous\")\n\n# Values in [-1, 1]\n# Threshold determines activation (e.g., &gt; 0.5)\naction = np.array([0.8, 0.0, -0.3, 0.0, 0.9, 0.0, 0.0, 0.0])\nobs, reward, terminated, truncated, info = env.step(action)\n</code></pre>"},{"location":"user-guide/action-spaces/#best-for_2","title":"Best For","text":"<ul> <li>Advanced control</li> <li>SAC, TD3 agents</li> <li>Research purposes</li> </ul>"},{"location":"user-guide/action-spaces/#custom-action-mappings","title":"Custom Action Mappings","text":"<p>Create custom wrappers for different action schemes:</p> <pre><code>class CustomActionWrapper(gym.ActionWrapper):\n    \"\"\"Map continuous actions to discrete.\"\"\"\n\n    def __init__(self, env):\n        super().__init__(env)\n        self.action_space = gym.spaces.Box(\n            low=-1, high=1, shape=(2,), dtype=np.float32\n        )\n\n    def action(self, action):\n        \"\"\"Convert continuous [move, attack] to discrete.\"\"\"\n        move = action[0]\n        attack = action[1]\n\n        if attack &gt; 0.5:\n            return 5  # Attack\n        elif move &gt; 0.5:\n            return 1  # Forward\n        elif move &lt; -0.5:\n            return 2  # Backward\n        else:\n            return 0  # No-op\n</code></pre>"},{"location":"user-guide/action-spaces/#action-timing","title":"Action Timing","text":""},{"location":"user-guide/action-spaces/#frame-skip","title":"Frame Skip","text":"<p>Actions are repeated for <code>frame_skip</code> frames:</p> <pre><code># Action repeated for 4 frames (default)\nenv = gym.make(\"EldenGym-v0\", frame_skip=4)\n\n# No frame skip\nenv = gym.make(\"EldenGym-v0\", frame_skip=1)\n</code></pre>"},{"location":"user-guide/action-spaces/#hold-time","title":"Hold Time","text":"<p>Key hold duration (in milliseconds):</p> <pre><code># Hold keys for 100ms\nclient.send_key(['W'], hold_time=100)\n\n# Hold keys for 500ms (longer action)\nclient.send_key(['R1'], hold_time=500)\n</code></pre>"},{"location":"user-guide/action-spaces/#action-examples","title":"Action Examples","text":""},{"location":"user-guide/action-spaces/#defensive-play","title":"Defensive Play","text":"<pre><code># Discrete: dodge frequently\nactions = [6, 6, 1, 6, 5]  # Dodge, move, attack\n\n# Multi-binary: dodge while moving\naction = np.array([1, 0, 0, 0, 0, 1, 0, 0])  # Forward + dodge\n</code></pre>"},{"location":"user-guide/action-spaces/#aggressive-play","title":"Aggressive Play","text":"<pre><code># Discrete: attack combo\nactions = [5, 5, 5, 6]  # Attack x3, dodge\n\n# Multi-binary: attack while moving\naction = np.array([1, 0, 0, 0, 1, 0, 1, 0])  # Forward + attack + lock-on\n</code></pre>"},{"location":"user-guide/action-spaces/#kiting-strategy","title":"Kiting Strategy","text":"<pre><code># Move backward while locked on\naction = np.array([0, 1, 0, 0, 0, 0, 1, 0])  # Backward + lock-on\n</code></pre>"},{"location":"user-guide/action-spaces/#next-steps","title":"Next Steps","text":"<ul> <li>Observation Spaces</li> <li>Rewards</li> <li>Examples</li> </ul>"},{"location":"user-guide/environment/","title":"Environment Guide","text":"<p>Complete guide to using the EldenGym environment.</p>"},{"location":"user-guide/environment/#creating-an-environment","title":"Creating an Environment","text":"<pre><code>import gymnasium as gym\nimport eldengym\n\nenv = gym.make(\"EldenGym-v0\")\n</code></pre>"},{"location":"user-guide/environment/#environment-lifecycle","title":"Environment Lifecycle","text":""},{"location":"user-guide/environment/#1-reset","title":"1. Reset","text":"<p>Start a new episode:</p> <pre><code>observation, info = env.reset()\n\nprint(f\"Player HP: {info['player_hp']}\")\nprint(f\"Boss HP: {info['target_hp']}\")\nprint(f\"Observation shape: {observation.shape}\")\n</code></pre>"},{"location":"user-guide/environment/#2-step","title":"2. Step","text":"<p>Execute an action:</p> <pre><code>action = env.action_space.sample()\nobs, reward, terminated, truncated, info = env.step(action)\n\nif terminated:\n    print(\"Episode ended (boss defeated or player died)\")\nif truncated:\n    print(\"Episode truncated (max steps reached)\")\n</code></pre>"},{"location":"user-guide/environment/#3-render","title":"3. Render","text":"<p>Get the current frame:</p> <pre><code>frame = env.render()\n# Returns RGB numpy array (H, W, 3)\n</code></pre>"},{"location":"user-guide/environment/#4-close","title":"4. Close","text":"<p>Clean up resources:</p> <pre><code>env.close()\n</code></pre>"},{"location":"user-guide/environment/#complete-example","title":"Complete Example","text":"<pre><code>import gymnasium as gym\nimport eldengym\n\n# Create environment\nenv = gym.make(\"EldenGym-v0\", scenario_name=\"margit\")\n\n# Training loop\nfor episode in range(10):\n    obs, info = env.reset()\n    episode_reward = 0\n\n    done = False\n    while not done:\n        # Your agent logic here\n        action = env.action_space.sample()\n\n        obs, reward, terminated, truncated, info = env.step(action)\n        episode_reward += reward\n        done = terminated or truncated\n\n        # Optionally render\n        # frame = env.render()\n\n    print(f\"Episode {episode}: Reward = {episode_reward:.2f}\")\n\nenv.close()\n</code></pre>"},{"location":"user-guide/environment/#configuration-options","title":"Configuration Options","text":"<p>See the Configuration Guide for all options.</p>"},{"location":"user-guide/environment/#common-patterns","title":"Common Patterns","text":""},{"location":"user-guide/environment/#fixed-episode-length","title":"Fixed Episode Length","text":"<pre><code>env = gym.make(\"EldenGym-v0\", max_step=1000)\n\nobs, info = env.reset()\nfor step in range(1000):\n    action = env.action_space.sample()\n    obs, reward, terminated, truncated, info = env.step(action)\n    if terminated or truncated:\n        break\n</code></pre>"},{"location":"user-guide/environment/#monitoring-stats","title":"Monitoring Stats","text":"<pre><code>obs, info = env.reset()\nstats = {\n    'player_hp': [],\n    'target_hp': [],\n    'rewards': []\n}\n\nfor step in range(1000):\n    action = agent.predict(obs)\n    obs, reward, terminated, truncated, info = env.step(action)\n\n    stats['player_hp'].append(info['player_hp'])\n    stats['target_hp'].append(info['target_hp'])\n    stats['rewards'].append(reward)\n\n    if terminated or truncated:\n        break\n\n# Plot stats\nimport matplotlib.pyplot as plt\nplt.plot(stats['player_hp'], label='Player HP')\nplt.plot(stats['target_hp'], label='Boss HP')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"user-guide/environment/#custom-reset-logic","title":"Custom Reset Logic","text":"<pre><code>class CustomEnv(gym.Wrapper):\n    def reset(self, **kwargs):\n        obs, info = super().reset(**kwargs)\n        # Custom initialization\n        self.env.unwrapped.client.set_player_hp(9999)\n        return obs, info\n\nenv = CustomEnv(gym.make(\"EldenGym-v0\"))\n</code></pre>"},{"location":"user-guide/environment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/environment/#environment-wont-reset","title":"Environment Won't Reset","text":"<p>Problem: Reset hangs or fails</p> <p>Solutions: - Ensure Siphon server is running - Check game is at the correct location - Verify memory patterns are correct</p>"},{"location":"user-guide/environment/#actions-dont-work","title":"Actions Don't Work","text":"<p>Problem: Actions have no effect in game</p> <p>Solutions: - Ensure input subsystem is initialized - Check game has focus - Verify key mappings match your game settings</p>"},{"location":"user-guide/environment/#poor-performance","title":"Poor Performance","text":"<p>Problem: Environment runs slowly</p> <p>Solutions: <pre><code># Increase frame skip\nenv = gym.make(\"EldenGym-v0\", frame_skip=8)\n\n# Disable frame capture if not needed\nenv = gym.make(\"EldenGym-v0\", observation_mode=\"dict\")\n\n# Adjust game speed\nenv = gym.make(\"EldenGym-v0\", game_speed=2.0)\n</code></pre></p>"},{"location":"user-guide/environment/#next-steps","title":"Next Steps","text":"<ul> <li>Action Spaces Guide</li> <li>Observation Spaces Guide</li> <li>Rewards Guide</li> </ul>"},{"location":"user-guide/observation-spaces/","title":"Observation Spaces","text":"<p>EldenGym provides flexible observation spaces for different use cases.</p>"},{"location":"user-guide/observation-spaces/#rgb-mode-default","title":"RGB Mode (Default)","text":"<p>Type: <code>gymnasium.spaces.Box(0, 255, (H, W, 3), uint8)</code></p> <p>Returns only the game frame as RGB image.</p> <pre><code>env = gym.make(\"EldenGym-v0\", observation_mode=\"rgb\")\n\nobs, info = env.reset()\nprint(obs.shape)  # (1080, 1920, 3) - depends on game resolution\n</code></pre>"},{"location":"user-guide/observation-spaces/#usage","title":"Usage","text":"<pre><code>import matplotlib.pyplot as plt\n\nobs, info = env.reset()\nplt.imshow(obs)\nplt.show()\n</code></pre>"},{"location":"user-guide/observation-spaces/#best-for","title":"Best For","text":"<ul> <li>Vision-based agents</li> <li>CNN policies</li> <li>Pixel-to-action learning</li> </ul>"},{"location":"user-guide/observation-spaces/#dictionary-mode","title":"Dictionary Mode","text":"<p>Type: <code>gymnasium.spaces.Dict({...})</code></p> <p>Returns frame plus game state information.</p> <pre><code>env = gym.make(\"EldenGym-v0\", observation_mode=\"dict\")\n\nobs, info = env.reset()\nprint(obs.keys())  # ['frame', 'player_hp', 'target_hp', ...]\n</code></pre>"},{"location":"user-guide/observation-spaces/#structure","title":"Structure","text":"<pre><code>{\n    'frame': Box(0, 255, (H, W, 3), uint8),\n    'player_hp': Box(0, inf, (1,), float32),\n    'player_max_hp': Box(0, inf, (1,), float32),\n    'target_hp': Box(0, inf, (1,), float32),\n    'target_max_hp': Box(0, inf, (1,), float32),\n    'distance': Box(0, inf, (1,), float32),\n    'player_animation_id': Box(0, inf, (1,), float32),\n    'target_animation_id': Box(0, inf, (1,), float32),\n}\n</code></pre>"},{"location":"user-guide/observation-spaces/#usage_1","title":"Usage","text":"<pre><code>obs, info = env.reset()\n\nframe = obs['frame']\nplayer_hp = obs['player_hp'][0]\nboss_hp = obs['target_hp'][0]\ndistance = obs['distance'][0]\n\nprint(f\"HP: {player_hp}/{obs['player_max_hp'][0]}\")\nprint(f\"Boss HP: {boss_hp}/{obs['target_max_hp'][0]}\")\nprint(f\"Distance: {distance:.2f}\")\n</code></pre>"},{"location":"user-guide/observation-spaces/#best-for_1","title":"Best For","text":"<ul> <li>Multi-modal agents</li> <li>State-based policies</li> <li>Hybrid vision + state approaches</li> </ul>"},{"location":"user-guide/observation-spaces/#custom-observations","title":"Custom Observations","text":""},{"location":"user-guide/observation-spaces/#wrapper-for-grayscale","title":"Wrapper for Grayscale","text":"<pre><code>from gymnasium.wrappers import GrayScaleObservation\n\nenv = gym.make(\"EldenGym-v0\")\nenv = GrayScaleObservation(env)\n\nobs, info = env.reset()\nprint(obs.shape)  # (H, W) - grayscale\n</code></pre>"},{"location":"user-guide/observation-spaces/#wrapper-for-resize","title":"Wrapper for Resize","text":"<pre><code>from gymnasium.wrappers import ResizeObservation\n\nenv = gym.make(\"EldenGym-v0\")\nenv = ResizeObservation(env, shape=(84, 84))\n\nobs, info = env.reset()\nprint(obs.shape)  # (84, 84, 3)\n</code></pre>"},{"location":"user-guide/observation-spaces/#wrapper-for-frame-stacking","title":"Wrapper for Frame Stacking","text":"<pre><code>from gymnasium.wrappers import FrameStack\n\nenv = gym.make(\"EldenGym-v0\")\nenv = FrameStack(env, num_stack=4)\n\nobs, info = env.reset()\nprint(obs.shape)  # (4, H, W, 3) - 4 stacked frames\n</code></pre>"},{"location":"user-guide/observation-spaces/#combined-preprocessing","title":"Combined Preprocessing","text":"<pre><code>from gymnasium.wrappers import (\n    GrayScaleObservation,\n    ResizeObservation,\n    FrameStack,\n)\n\n# Create Atari-style preprocessing\nenv = gym.make(\"EldenGym-v0\", frame_skip=4)\nenv = GrayScaleObservation(env)\nenv = ResizeObservation(env, (84, 84))\nenv = FrameStack(env, num_stack=4)\n\nobs, info = env.reset()\nprint(obs.shape)  # (4, 84, 84) - ready for DQN/PPO\n</code></pre>"},{"location":"user-guide/observation-spaces/#custom-observation-wrapper","title":"Custom Observation Wrapper","text":"<pre><code>import gymnasium as gym\nimport numpy as np\n\nclass NormalizeObservation(gym.ObservationWrapper):\n    \"\"\"Normalize observation values.\"\"\"\n\n    def __init__(self, env):\n        super().__init__(env)\n        # Update observation space\n        self.observation_space = gym.spaces.Box(\n            low=0.0,\n            high=1.0,\n            shape=env.observation_space.shape,\n            dtype=np.float32\n        )\n\n    def observation(self, obs):\n        \"\"\"Normalize to [0, 1].\"\"\"\n        return obs.astype(np.float32) / 255.0\n\n# Use it\nenv = NormalizeObservation(gym.make(\"EldenGym-v0\"))\n</code></pre>"},{"location":"user-guide/observation-spaces/#state-only-observation","title":"State-Only Observation","text":"<p>If you don't need frames:</p> <pre><code>class StateOnlyWrapper(gym.ObservationWrapper):\n    \"\"\"Return only game state, no frames.\"\"\"\n\n    def __init__(self, env):\n        super().__init__(env)\n        self.observation_space = gym.spaces.Box(\n            low=0, high=np.inf, shape=(7,), dtype=np.float32\n        )\n\n    def observation(self, obs):\n        \"\"\"Extract state from info.\"\"\"\n        info = self.env.unwrapped.last_info\n        return np.array([\n            info['player_hp'],\n            info['player_max_hp'],\n            info['target_hp'],\n            info['target_max_hp'],\n            info['distance'],\n            info['player_animation_id'],\n            info['target_animation_id'],\n        ], dtype=np.float32)\n\nenv = StateOnlyWrapper(gym.make(\"EldenGym-v0\"))\n</code></pre>"},{"location":"user-guide/observation-spaces/#performance-considerations","title":"Performance Considerations","text":""},{"location":"user-guide/observation-spaces/#reduce-frame-cost","title":"Reduce Frame Cost","text":"<pre><code># Don't capture frames if not needed\nenv = gym.make(\"EldenGym-v0\", observation_mode=\"dict\")\n\n# Only use state\nobs = {k: v for k, v in obs.items() if k != 'frame'}\n</code></pre>"},{"location":"user-guide/observation-spaces/#reduce-resolution","title":"Reduce Resolution","text":"<pre><code># Lower resolution = faster processing\nenv = gym.make(\"EldenGym-v0\")\nenv = ResizeObservation(env, (320, 180))  # Much smaller\n</code></pre>"},{"location":"user-guide/observation-spaces/#skip-frames","title":"Skip Frames","text":"<pre><code># Higher frame skip = fewer observations\nenv = gym.make(\"EldenGym-v0\", frame_skip=8)\n</code></pre>"},{"location":"user-guide/observation-spaces/#info-dictionary","title":"Info Dictionary","text":"<p>Additional information available in <code>info</code>:</p> <pre><code>obs, info = env.reset()\n\n# Available keys:\ninfo['player_hp']           # Current HP\ninfo['player_max_hp']       # Max HP\ninfo['target_hp']           # Boss HP\ninfo['target_max_hp']       # Boss max HP\ninfo['distance']            # Distance to boss\ninfo['player_animation_id'] # Player animation\ninfo['target_animation_id'] # Boss animation\ninfo['step_count']          # Steps in episode\n\n# After step:\nobs, reward, terminated, truncated, info = env.step(action)\ninfo['player_hp_delta']     # HP change\ninfo['target_hp_delta']     # Boss HP change\n</code></pre>"},{"location":"user-guide/observation-spaces/#next-steps","title":"Next Steps","text":"<ul> <li>Action Spaces</li> <li>Rewards</li> <li>API Reference</li> </ul>"},{"location":"user-guide/rewards/","title":"Rewards","text":"<p>Understanding and customizing reward functions in EldenGym.</p>"},{"location":"user-guide/rewards/#default-reward-function","title":"Default Reward Function","text":"<p>The default reward encourages defeating the boss while staying alive:</p> <pre><code>def default_reward(obs, info, terminated, truncated):\n    reward = 0.0\n\n    # Reward for damaging boss\n    if 'target_hp_delta' in info and info['target_hp_delta'] &lt; 0:\n        reward += abs(info['target_hp_delta']) / 10.0\n\n    # Penalty for taking damage\n    if 'player_hp_delta' in info and info['player_hp_delta'] &lt; 0:\n        reward += info['player_hp_delta'] / 10.0  # Negative value\n\n    # Big bonus for defeating boss\n    if terminated and info.get('target_hp', 0) &lt;= 0:\n        reward += 100.0\n\n    # Penalty for dying\n    if terminated and info.get('player_hp', 0) &lt;= 0:\n        reward -= 50.0\n\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#custom-reward-functions","title":"Custom Reward Functions","text":""},{"location":"user-guide/rewards/#signature","title":"Signature","text":"<pre><code>def my_reward_function(obs, info, terminated, truncated):\n    \"\"\"\n    Args:\n        obs: Current observation (np.ndarray or dict)\n        info: Info dictionary with game state\n        terminated: Whether episode ended\n        truncated: Whether episode was truncated\n\n    Returns:\n        float: Reward value\n    \"\"\"\n    reward = 0.0\n    # Your logic here\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#usage","title":"Usage","text":"<pre><code>env = gym.make(\n    \"EldenGym-v0\",\n    reward_function=my_reward_function\n)\n</code></pre>"},{"location":"user-guide/rewards/#reward-design-examples","title":"Reward Design Examples","text":""},{"location":"user-guide/rewards/#aggressive-play","title":"Aggressive Play","text":"<p>Encourage attacking:</p> <pre><code>def aggressive_reward(obs, info, terminated, truncated):\n    reward = 0.0\n\n    # Big reward for boss damage\n    if 'target_hp_delta' in info and info['target_hp_delta'] &lt; 0:\n        reward += abs(info['target_hp_delta']) * 2.0  # 2x multiplier\n\n    # Small penalty for taking damage\n    if 'player_hp_delta' in info and info['player_hp_delta'] &lt; 0:\n        reward += info['player_hp_delta'] * 0.1  # Only 0.1x\n\n    # Huge bonus for winning\n    if terminated and info.get('target_hp', 0) &lt;= 0:\n        reward += 500.0\n\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#defensive-play","title":"Defensive Play","text":"<p>Encourage survival:</p> <pre><code>def defensive_reward(obs, info, terminated, truncated):\n    reward = 0.0\n\n    # Reward for staying alive (per step)\n    reward += 0.1\n\n    # Moderate reward for boss damage\n    if 'target_hp_delta' in info and info['target_hp_delta'] &lt; 0:\n        reward += abs(info['target_hp_delta']) * 0.5\n\n    # Big penalty for taking damage\n    if 'player_hp_delta' in info and info['player_hp_delta'] &lt; 0:\n        reward += info['player_hp_delta'] * 5.0  # 5x penalty\n\n    # Bonus for winning without damage\n    if terminated and info.get('target_hp', 0) &lt;= 0:\n        hp_ratio = info['player_hp'] / info['player_max_hp']\n        reward += 100.0 * hp_ratio  # Bonus scales with HP remaining\n\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#distance-based","title":"Distance-Based","text":"<p>Encourage maintaining optimal distance:</p> <pre><code>def distance_reward(obs, info, terminated, truncated):\n    reward = 0.0\n\n    # Optimal distance: 5-10 units\n    distance = info.get('distance', 0)\n    if 5 &lt;= distance &lt;= 10:\n        reward += 1.0  # Good positioning\n    elif distance &lt; 3:\n        reward -= 0.5  # Too close\n    elif distance &gt; 15:\n        reward -= 0.5  # Too far\n\n    # Standard combat rewards\n    if 'target_hp_delta' in info and info['target_hp_delta'] &lt; 0:\n        reward += abs(info['target_hp_delta']) / 10.0\n\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#time-based","title":"Time-Based","text":"<p>Encourage speed:</p> <pre><code>def speed_reward(obs, info, terminated, truncated):\n    reward = 0.0\n\n    # Penalty for each step (encourage speed)\n    reward -= 0.01\n\n    # Standard damage rewards\n    if 'target_hp_delta' in info and info['target_hp_delta'] &lt; 0:\n        reward += abs(info['target_hp_delta']) / 10.0\n\n    # Huge bonus for fast win\n    if terminated and info.get('target_hp', 0) &lt;= 0:\n        steps = info.get('step_count', 1000)\n        reward += 200.0 * (1000 / max(steps, 1))  # Bonus inversely proportional to steps\n\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#shaped-reward","title":"Shaped Reward","text":"<p>Dense rewards for learning:</p> <pre><code>def shaped_reward(obs, info, terminated, truncated):\n    reward = 0.0\n\n    # HP-based shaping\n    player_hp_ratio = info['player_hp'] / info['player_max_hp']\n    target_hp_ratio = info['target_hp'] / info['target_max_hp']\n\n    # Reward for HP advantage\n    reward += (player_hp_ratio - target_hp_ratio) * 0.1\n\n    # Distance shaping\n    distance = info.get('distance', 0)\n    if distance &gt; 0:\n        reward += 1.0 / (distance + 1)  # Closer = better\n\n    # Combat rewards\n    if 'target_hp_delta' in info:\n        reward += abs(info['target_hp_delta']) * 1.0\n    if 'player_hp_delta' in info:\n        reward += info['player_hp_delta'] * 2.0\n\n    # Terminal rewards\n    if terminated:\n        if info.get('target_hp', 0) &lt;= 0:\n            reward += 100.0\n        else:\n            reward -= 50.0\n\n    return reward\n</code></pre>"},{"location":"user-guide/rewards/#available-info-fields","title":"Available Info Fields","text":"<p>Use these in your reward function:</p> <pre><code>info['player_hp']           # Current player HP\ninfo['player_max_hp']       # Max player HP\ninfo['target_hp']           # Current boss HP\ninfo['target_max_hp']       # Max boss HP\ninfo['distance']            # Distance to boss\ninfo['player_animation_id'] # Player animation ID\ninfo['target_animation_id'] # Boss animation ID\ninfo['step_count']          # Steps in current episode\n\n# After step (not in reset):\ninfo['player_hp_delta']     # HP change this step\ninfo['target_hp_delta']     # Boss HP change this step\n</code></pre>"},{"location":"user-guide/rewards/#reward-scaling","title":"Reward Scaling","text":""},{"location":"user-guide/rewards/#normalize-rewards","title":"Normalize Rewards","text":"<pre><code>from gymnasium.wrappers import NormalizeReward\n\nenv = gym.make(\"EldenGym-v0\")\nenv = NormalizeReward(env)  # Normalize rewards using running statistics\n</code></pre>"},{"location":"user-guide/rewards/#clip-rewards","title":"Clip Rewards","text":"<pre><code>from gymnasium.wrappers import ClipReward\n\nenv = gym.make(\"EldenGym-v0\")\nenv = ClipReward(env, min_reward=-1.0, max_reward=1.0)\n</code></pre>"},{"location":"user-guide/rewards/#transform-rewards","title":"Transform Rewards","text":"<pre><code>from gymnasium.wrappers import TransformReward\n\nenv = gym.make(\"EldenGym-v0\")\nenv = TransformReward(env, lambda r: np.sign(r) * np.log(1 + abs(r)))\n</code></pre>"},{"location":"user-guide/rewards/#debugging-rewards","title":"Debugging Rewards","text":""},{"location":"user-guide/rewards/#log-rewards","title":"Log Rewards","text":"<pre><code>rewards = []\n\nobs, info = env.reset()\nfor _ in range(1000):\n    action = env.action_space.sample()\n    obs, reward, terminated, truncated, info = env.step(action)\n    rewards.append(reward)\n\n    if terminated or truncated:\n        break\n\n# Analyze\nimport matplotlib.pyplot as plt\nplt.plot(rewards)\nplt.title('Rewards over Episode')\nplt.xlabel('Step')\nplt.ylabel('Reward')\nplt.show()\n\nprint(f\"Total reward: {sum(rewards)}\")\nprint(f\"Mean reward: {np.mean(rewards)}\")\nprint(f\"Max reward: {max(rewards)}\")\nprint(f\"Min reward: {min(rewards)}\")\n</code></pre>"},{"location":"user-guide/rewards/#reward-components","title":"Reward Components","text":"<p>Track individual components:</p> <pre><code>def tracked_reward(obs, info, terminated, truncated):\n    components = {\n        'damage_dealt': 0.0,\n        'damage_taken': 0.0,\n        'survival': 0.0,\n        'terminal': 0.0,\n    }\n\n    if 'target_hp_delta' in info and info['target_hp_delta'] &lt; 0:\n        components['damage_dealt'] = abs(info['target_hp_delta']) / 10.0\n\n    if 'player_hp_delta' in info and info['player_hp_delta'] &lt; 0:\n        components['damage_taken'] = info['player_hp_delta'] / 10.0\n\n    components['survival'] = 0.01\n\n    if terminated:\n        if info.get('target_hp', 0) &lt;= 0:\n            components['terminal'] = 100.0\n        else:\n            components['terminal'] = -50.0\n\n    # Log components (to TensorBoard, wandb, etc.)\n    # ...\n\n    return sum(components.values())\n\nenv = gym.make(\"EldenGym-v0\", reward_function=tracked_reward)\n</code></pre>"},{"location":"user-guide/rewards/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple - Begin with sparse rewards (win/loss only)</li> <li>Add Shaping Gradually - Introduce dense rewards step by step</li> <li>Balance Components - Ensure no single component dominates</li> <li>Test Thoroughly - Run random policy to check reward distribution</li> <li>Scale Appropriately - Keep rewards in reasonable range (-1 to 1 or -100 to 100)</li> <li>Avoid Reward Hacking - Test for unintended behaviors</li> </ol>"},{"location":"user-guide/rewards/#next-steps","title":"Next Steps","text":"<ul> <li>Environment Guide</li> <li>Action Spaces</li> <li>Examples</li> </ul>"}]}